%!PS-Adobe-3.0
%%BoundingBox: 0 0 595 792
%%LanguageLevel: 2
%%Creator: htmldoc 1.8.4 Copyright 1997-1999 Easy Software Products, All Rights Reserved.
%%CreationDate: D:20000830140738Z
%%docTitle:  Linux Kernel Internals 
%%Pages: 56
%%DocumentNeededResources:
%%+ font Courier
%%+ font Courier-Bold
%%+ font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%DocumentData: Clean7bit
%%EndComments
%%BeginProlog
/fontencoding[
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/minus/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/.notdef
/.notdef/.notdef/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
/circumflex/perthousand/Scaron/guilsinglleft/OE/.notdef/.notdef/.notdef
/.notdef/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
/tilde/trademark/scaron/guilsinglright/oe/.notdef/.notdef/Ydieresis
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
]def/Courier findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding fontencoding def currentdict end
/F0 exch definefont pop
/Courier-Bold findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding fontencoding def currentdict end
/F1 exch definefont pop
/Times-Roman findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding fontencoding def currentdict end
/F4 exch definefont pop
/Times-Bold findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding fontencoding def currentdict end
/F5 exch definefont pop
/Times-Italic findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding fontencoding def currentdict end
/F6 exch definefont pop
/Helvetica findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding fontencoding def currentdict end
/F8 exch definefont pop
/Helvetica-Bold findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding fontencoding def currentdict end
/F9 exch definefont pop
/Symbol findfont
/Fc exch definefont pop
/BD{bind def}bind def/B{dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath stroke}BD/C{setrgbcolor}BD/CM{concat}BD/F{dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath fill}BD/GS{gsave}BD/GR{grestore}BD/L{0 rlineto stroke}BD/M{moveto}BD/S{show}BD/SF{findfont exch scalefont setfont}BD/SP{showpage}BD/T{translate}BD
%%EndProlog
%%Page: title 1
GS
72 36 T
20/F9 SF 132.9 354.6 M( Linux Kernel Internals )S
GR
SP
%%EndPage
%%Page: i 2
GS
72 36 T
20/F9 SF 159 674 M(Table of Contents)S
11/F5 SF 0 636.8 M(Linux )S
30.9 636.8 M(Kernel )S
66 636.8 M(Internals)S
107.5 636.8 M(.......................................................................................................................................1)S
11/F4 SF 36 623.6 M(Tigran )S
68.1 623.6 M(Aivazian )S
110.5 623.6 M(tigran@veritas.com)S
195.5 623.6 M(.......................................................................................................1)S
36 610.4 M(1.)S
44.2 610.4 M(Booting)S
77.2 610.4 M(..................................................................................................................................................1)S
36 597.2 M(2.)S
44.2 597.2 M(Process )S
80.6 597.2 M(and )S
99.2 597.2 M(Interrupt )S
140.5 597.2 M(Management)S
195.5 597.2 M(.......................................................................................................1)S
36 584 M(3.)S
44.2 584 M(Virtual )S
78.2 584 M(Filesystem )S
128.6 584 M(\(VFS\))S
154.2 584 M(......................................................................................................................2)S
36 570.8 M(1.)S
44.2 570.8 M(Booting)S
77.2 570.8 M(..................................................................................................................................................2)S
36 557.6 M(1.1 )S
52.5 557.6 M(Building )S
93.8 557.6 M(the )S
110 557.6 M(Linux )S
139 557.6 M(Kernel )S
171.7 557.6 M(Image)S
198.3 557.6 M(......................................................................................................2)S
36 544.4 M(1.2 )S
52.5 544.4 M(Booting: )S
93.8 544.4 M(Overview)S
135 544.4 M(.............................................................................................................................3)S
36 531.2 M(1.3 )S
52.5 531.2 M(Booting: )S
93.8 531.2 M(BIOS )S
121.6 531.2 M(POST)S
146 531.2 M(.........................................................................................................................3)S
36 518 M(1.4 )S
52.5 518 M(Booting: )S
93.8 518 M(bootsector )S
142.3 518 M(and )S
161 518 M(setup)S
181.8 518 M(............................................................................................................4)S
36 504.8 M(1.5 )S
52.5 504.8 M(Using )S
81.5 504.8 M(LILO )S
109.3 504.8 M(as )S
121.2 504.8 M(a )S
128.9 504.8 M(bootloader )S
176.3 504.8 M(..............................................................................................................7)S
36 491.6 M(1.6 )S
52.5 491.6 M(High )S
77.2 491.6 M(level )S
101.4 491.6 M(initialisation )S
157 491.6 M(.....................................................................................................................7)S
36 478.4 M(1.7 )S
52.5 478.4 M(SMP )S
77.3 478.4 M(Bootup )S
112.4 478.4 M(on )S
126.2 478.4 M(x86)S
140.5 478.4 M(...........................................................................................................................9)S
36 465.2 M(1.8 )S
52.5 465.2 M(Freeing )S
88.9 465.2 M(initialisation )S
146.6 465.2 M(data )S
167.7 465.2 M(and )S
186.3 465.2 M(code)S
206.5 465.2 M(...................................................................................................9)S
36 452 M(1.9 )S
52.5 452 M(Processing )S
102.9 452 M(kernel )S
133.2 452 M(command )S
179.3 452 M(line)S
195.5 452 M(.....................................................................................................10)S
36 438.8 M(2.)S
44.2 438.8 M(Process )S
80.6 438.8 M(and )S
99.2 438.8 M(Interrupt )S
140.5 438.8 M(Management)S
195.5 438.8 M(.....................................................................................................12)S
36 425.6 M(2.1 )S
52.5 425.6 M(Task )S
76.6 425.6 M(Structure )S
119.7 425.6 M(and )S
138.3 425.6 M(Process )S
174.7 425.6 M(Table)S
198.2 425.6 M(....................................................................................................12)S
36 412.4 M(2.2 )S
52.5 412.4 M(Creation )S
93.1 412.4 M(and )S
111.8 412.4 M(termination )S
165.2 412.4 M(of )S
177.2 412.4 M(tasks )S
201.9 412.4 M(and )S
220.5 412.4 M(kernel )S
250.8 412.4 M(threads)S
280.8 412.4 M(......................................................................16)S
36 399.2 M(2.3 )S
52.5 399.2 M(Linux )S
81.5 399.2 M(Scheduler)S
124 399.2 M(...............................................................................................................................18)S
36 386 M(2.4 )S
52.5 386 M(Linux )S
81.5 386 M(linked )S
111.8 386 M(list )S
128 386 M(implementation)S
195.5 386 M(.....................................................................................................20)S
36 372.8 M(2.5 )S
52.5 372.8 M(Wait )S
76.6 372.8 M(Queues)S
107.5 372.8 M(.....................................................................................................................................22)S
36 359.6 M(2.6 )S
52.5 359.6 M(Kernel )S
85.2 359.6 M(Timers)S
115.8 359.6 M(..................................................................................................................................25)S
36 346.4 M(2.7 )S
52.5 346.4 M(Bottom )S
88.3 346.4 M(Halves)S
118.5 346.4 M(.................................................................................................................................25)S
36 333.2 M(2.8 )S
52.5 333.2 M(Task )S
76.6 333.2 M(Queues)S
107.5 333.2 M(.....................................................................................................................................26)S
36 320 M(2.9 )S
52.5 320 M(Tasklets)S
88.3 320 M(............................................................................................................................................27)S
36 306.8 M(2.10 )S
58 306.8 M(Softirqs)S
91 306.8 M(...........................................................................................................................................27)S
36 293.6 M(2.11 )S
58 293.6 M(How )S
82.1 293.6 M(System )S
117.3 293.6 M(Calls )S
142.6 293.6 M(Are )S
161.9 293.6 M(Implemented )S
222.7 293.6 M(on )S
236.4 293.6 M(i386 )S
258.7 293.6 M(Architecture?)S
316.5 293.6 M(.........................................................27)S
36 280.4 M(2.12 )S
58 280.4 M(Atomic )S
93.8 280.4 M(Operations)S
140.5 280.4 M(.........................................................................................................................28)S
36 267.2 M(2.13 )S
58 267.2 M(Spinlocks, )S
106.9 267.2 M(Read-write )S
161.1 267.2 M(Spinlocks )S
207.2 267.2 M(and )S
225.8 267.2 M(Big-Reader )S
281.8 267.2 M(Spinlocks)S
324.8 267.2 M(......................................................30)S
36 254 M(2.14 )S
58 254 M(Semaphores )S
114.5 254 M(and )S
133.2 254 M(read/write )S
180.5 254 M(Semaphores)S
234 254 M(.......................................................................................32)S
36 240.8 M(2.15 )S
58 240.8 M(Kernel )S
90.7 240.8 M(Support )S
128.3 240.8 M(for )S
143.8 240.8 M(Loading )S
183.3 240.8 M(Modules)S
220.2 240.8 M(............................................................................................33)S
36 227.6 M(3.)S
44.2 227.6 M(Virtual )S
78.2 227.6 M(Filesystem )S
128.6 227.6 M(\(VFS\))S
154.2 227.6 M(....................................................................................................................36)S
36 214.4 M(3.1 )S
52.5 214.4 M(Inode )S
80.3 214.4 M(Caches )S
114.8 214.4 M(and )S
133.4 214.4 M(Interaction )S
183.9 214.4 M(with )S
206.2 214.4 M(Dcache)S
236.7 214.4 M(......................................................................................36)S
36 201.2 M(3.2 )S
52.5 201.2 M(Filesystem )S
102.9 201.2 M(Registration/Unregistration)S
223 201.2 M(...........................................................................................39)S
36 188 M(3.3 )S
52.5 188 M(File )S
72.4 188 M(Descriptor )S
121.5 188 M(Management)S
176.2 188 M(............................................................................................................41)S
36 174.8 M(3.4 )S
52.5 174.8 M(File )S
72.4 174.8 M(Structure )S
115.4 174.8 M(Management)S
170.8 174.8 M(..............................................................................................................42)S
36 161.6 M(3.5 )S
52.5 161.6 M(Superblock )S
105.4 161.6 M(and )S
124 161.6 M(Mountpoint )S
178.7 161.6 M(Management)S
234 161.6 M(.......................................................................................45)S
36 148.4 M(3.6 )S
52.5 148.4 M(Example )S
94.4 148.4 M(Virtual )S
128.3 148.4 M(Filesystem: )S
181.8 148.4 M(pipefs)S
206.5 148.4 M(.................................................................................................48)S
36 135.2 M(3.7 )S
52.5 135.2 M(Example )S
94.4 135.2 M(Disk )S
117.9 135.2 M(Filesystem: )S
171.4 135.2 M(BFS)S
190 135.2 M(.......................................................................................................50)S
36 122 M(3.8 )S
52.5 122 M(Execution )S
99.9 122 M(Domains )S
142.3 122 M(and )S
161 122 M(Binary )S
193.7 122 M(Formats)S
228.5 122 M(.........................................................................................52)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
484.6 0 M(i)S
GR
SP
%%EndPage
%%Page: 1 3
GS
72 36 T
20/F9 SF 0 674 M(Linux Kernel Internals)S
17/F9 SF 0 612.8 M(Tigran Aivazian )S
17/F1 SF (tigran@veritas.com)S
11/F4 SF 0 586.4 M(22 August 2000)S
0 564.6 M 487.0 2.0 F
11/F6 SF 0 544.8 M(Introduction to the Linux 2.4 kernel. The latest copy of this document can be always downloaded from:)S
0 531.6 M(http://www.moses.uklinux.net/patches/lki.sgml This documentation is free software; you can redistribute it)S
0 518.4 M(and/or modify it under the terms of the GNU General Public License as published by the Free Software)S
0 505.2 M(Foundation; either version 2 of the License, or \(at your option\) any later version. The author is working as)S
0 492 M(senior Linux kernel engineer at VERITAS Software Ltd and wrote this book for the purpose of supporting the)S
0 478.8 M(short training course/lectures he gave on this subject, internally at VERITAS.)S
0 457 M 487.0 2.0 F
17/F9 SF 0 409.6 M(1.Booting)S
11/Fc SF 28.2 383.2 M(\267 )S
11/F4 SF (1.1 Building the Linux Kernel Image)S
11/Fc SF 28.2 370 M(\267 )S
11/F4 SF (1.2 Booting: Overview)S
11/Fc SF 28.2 356.8 M(\267 )S
11/F4 SF (1.3 Booting: BIOS POST)S
11/Fc SF 28.2 343.6 M(\267 )S
11/F4 SF (1.4 Booting: bootsector and setup)S
11/Fc SF 28.2 330.4 M(\267 )S
11/F4 SF (1.5 Using LILO as a bootloader)S
11/Fc SF 28.2 317.2 M(\267 )S
11/F4 SF (1.6 High level initialisation)S
11/Fc SF 28.2 304 M(\267 )S
11/F4 SF (1.7 SMP Bootup on x86)S
11/Fc SF 28.2 290.8 M(\267 )S
11/F4 SF (1.8 Freeing initialisation data and code)S
11/Fc SF 28.2 277.6 M(\267 )S
11/F4 SF (1.9 Processing kernel command line)S
17/F9 SF 0 223.6 M(2.Process and Interrupt Management)S
11/Fc SF 28.2 197.2 M(\267 )S
11/F4 SF (2.1 Task Structure and Process Table)S
11/Fc SF 28.2 184 M(\267 )S
11/F4 SF (2.2 Creation and termination of tasks and kernel threads)S
11/Fc SF 28.2 170.8 M(\267 )S
11/F4 SF (2.3 Linux Scheduler)S
11/Fc SF 28.2 157.6 M(\267 )S
11/F4 SF (2.4 Linux linked list implementation)S
11/Fc SF 28.2 144.4 M(\267 )S
11/F4 SF (2.5 Wait Queues)S
11/Fc SF 28.2 131.2 M(\267 )S
11/F4 SF (2.6 Kernel Timers)S
11/Fc SF 28.2 118 M(\267 )S
11/F4 SF (2.7 Bottom Halves)S
11/Fc SF 28.2 104.8 M(\267 )S
11/F4 SF (2.8 Task Queues)S
11/Fc SF 28.2 91.6 M(\267 )S
11/F4 SF (2.9 Tasklets)S
11/Fc SF 28.2 78.4 M(\267 )S
11/F4 SF (2.10 Softirqs)S
11/Fc SF 28.2 65.2 M(\267 )S
11/F4 SF (2.11 How System Calls Are Implemented on i386 Architecture?)S
11/Fc SF 28.2 52 M(\267 )S
11/F4 SF (2.12 Atomic Operations)S
11/Fc SF 28.2 38.8 M(\267 )S
11/F4 SF (2.13 Spinlocks, Read-write Spinlocks and Big-Reader Spinlocks)S
11/Fc SF 28.2 25.6 M(\267 )S
11/F4 SF (2.14 Semaphores and read/write Semaphores)S
11/F8 SF 0 0 M(Linux Kernel Internals)S
480.9 0 M(1)S
GR
SP
%%EndPage
%%Page: 2 4
GS
72 36 T
11/Fc SF 28.2 684.8 M(\267 )S
11/F4 SF (2.15 Kernel Support for Loading Modules)S
17/F9 SF 0 630.8 M(3.Virtual Filesystem \(VFS\))S
11/Fc SF 28.2 604.4 M(\267 )S
11/F4 SF (3.1 Inode Caches and Interaction with Dcache)S
11/Fc SF 28.2 591.2 M(\267 )S
11/F4 SF (3.2 Filesystem Registration/Unregistration)S
11/Fc SF 28.2 578 M(\267 )S
11/F4 SF (3.3 File Descriptor Management)S
11/Fc SF 28.2 564.8 M(\267 )S
11/F4 SF (3.4 File Structure Management)S
11/Fc SF 28.2 551.6 M(\267 )S
11/F4 SF (3.5 Superblock and Mountpoint Management)S
11/Fc SF 28.2 538.4 M(\267 )S
11/F4 SF (3.6 Example Virtual Filesystem: pipefs)S
11/Fc SF 28.2 525.2 M(\267 )S
11/F4 SF (3.7 Example Disk Filesystem: BFS)S
11/Fc SF 28.2 512 M(\267 )S
11/F4 SF (3.8 Execution Domains and Binary Formats)S
0 503.4 M 487.0 2.0 F
17/F9 SF 0 456 M(1.Booting)S
0 402 M(1.1 Building the Linux Kernel Image)S
11/F4 SF 0 375.6 M(This section explains the steps taken during compilation of the Linux kernel and the output produced at each)S
0 362.4 M(stage. The build process depends on the architecture so I would like to emphasize that we only consider)S
0 349.2 M(building a Linux/x86 kernel.)S
0 322.8 M(When the user types 'make zImage' or 'make bzImage' the resulting bootable kernel image is stored as)S
11/F0 SF 0 309.6 M(arch/i386/boot/zImage)S
11/F4 SF ( or )S
11/F0 SF (arch/i386/boot/bzImage)S
11/F4 SF ( respectively. Here is how the image is)S
0 296.4 M(built:)S
25 270 M(1. )S
(C and assembly source files are compiled into ELF relocatable object format \(.o\) and some of them)S
36 256.8 M(are grouped logically into archives \(.a\) using ar\(1\))S
25 243.6 M(2. )S
(Using ld\(1\), the above .o and .a are linked into 'vmlinux' which is a statically linked, non-stripped)S
36 230.4 M(ELF 32-bit LSB 80386 executable file)S
25 217.2 M(3. )S
(System.map is produced by 'nm vmlinux', irrelevant or uninteresting symbols are grepped out.)S
25 204 M(4. )S
(Enter directory arch/i386/boot)S
25 190.8 M(5. )S
(Bootsector asm code bootsect.S is preprocessed either with or without -D__BIG_KERNEL__,)S
36 177.6 M(depending on whether the target is bzImage or zImage, into bbootsect.s or bootsect.s respectively)S
25 164.4 M(6. )S
(bbootsect.s is assembled and then converted into 'raw binary' form called bbootsect \(or bootsect.s)S
36 151.2 M(assembled and raw-converted into bootsect for zImage\))S
25 138 M(7. )S
(Setup code setup,S \(setup.S includes video.S\) is preprocessed into bsetup.s for bzImage or setup.s for)S
36 124.8 M(zImage. In the same way as the bootsector code, the difference is marked by -D__BIG_KERNEL__)S
36 111.6 M(present for bzImage. The result is then converted into 'raw binary' form called bsetup)S
25 98.4 M(8. )S
(Enter directory arch/i386/boot/compressed and convert /usr/src/linux/vmlinux to $tmppiggy \(tmp)S
36 85.2 M(filename\) in raw binary format, removing .note and .comment ELF sections)S
25 72 M(9. )S
(gzip -9 < $tmppiggy > $tmppiggy.gz)S
19.5 58.8 M(10. )S
(Link $tmppiggy.gz into ELF relocatable \(ld -r\) piggy.o)S
19.5 45.6 M(11. )S
(Compile compression routines head.S and misc.c \(still in arch/i386/boot/compressed directory\) into)S
36 32.4 M(ELF objects head.o and misc.o)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.Virtual Filesystem \(VFS\))S
480.9 0 M(2)S
GR
SP
%%EndPage
%%Page: 3 5
GS
72 36 T
11/F4 SF 19.5 684.8 M(12. )S
(Link together head.o misc.o piggy.o into bvmlinux \(or vmlinux for zImage, don't mistake this for)S
36 671.6 M(/usr/src/linux/vmlinux!\). Note the difference between -Ttext 0x1000 used for vmlinux and -Ttext)S
36 658.4 M(0x100000 for bvmlinux, i.e. for bzImage compression loader is high-loaded)S
19.5 645.2 M(13. )S
(Convert bvmlinux to 'raw binary' bvmlinux.out removing .note and .comment ELF sections)S
19.5 632 M(14. )S
(Go back to arch/i386/boot directory and using the program tools/build cat together bbootsect +)S
36 618.8 M(bsetup + compressed/bvmlinux.out into bzImage \(delete extra 'b' above for zImage\). This writes)S
36 605.6 M(important variables like setup_sects and root_dev at the end of the bootsector.)S
0 579.2 M(The size of the bootsector is always 512 bytes. The size of the setup must be greater than 4 sectors but is)S
0 566 M(limited above by about 12K - the rule is:)S
0 539.6 M(0x4000 bytes >= 512 + setup_sects * 512 + room for stack while running bootsector/setup)S
0 513.2 M(We will see later where this limitation comes from.)S
0 486.8 M(The upper limit on the bzImage size produced at this step is about 2.5M for booting with LILO and 0xFFFF)S
0 473.6 M(paragraphs \(0xFFFF0 = 1048560 bytes\) for booting raw image, e.g. from floppy disk or CD-ROM)S
0 460.4 M(\(El-Torito emulation mode\).)S
0 434 M(Note, that tools/build validates the size of the boot sector, of the kernel image and lower bound on the size of)S
0 420.8 M(setup but not the upper bound of setup so it is easy to build a broken kernel by adding some large ".space" at)S
0 407.6 M(the end of setup.S.)S
17/F9 SF 0 353.6 M(1.2 Booting: Overview)S
11/F4 SF 0 314 M(The boot process details are architecture-specific so we shall focus our attention on the IBM PC/IA32)S
0 300.8 M(architecture. Due to old design and backward compatibility, the PC firmware boots the operating system in an)S
0 287.6 M(old-fashioned manner. This process can be separated into the following six logical stages:)S
25 248 M(1. )S
(BIOS selects the boot device)S
25 234.8 M(2. )S
(BIOS loads the bootsector from the boot device)S
25 221.6 M(3. )S
(Bootsector loads setup, decompression routines and compressed kernel image)S
25 208.4 M(4. )S
(The kernel is uncompressed in protected mode)S
25 195.2 M(5. )S
(Low-level initialisation performed by asm code)S
25 182 M(6. )S
(High-level C initialisation)S
17/F9 SF 0 128 M(1.3 Booting: BIOS POST)S
11/F4 SF 25 75.2 M(1. )S
(The power supply starts the clock generator and asserts #POWERGOOD signal on the bus)S
25 62 M(2. )S
(CPU #RESET line is asserted \(CPU now in real 8086 mode\))S
25 48.8 M(3. )S
(%ds=%es=%fs=%gs=%ss=0, %cs:%eip = 0xFFFF:0000 \(ROM BIOS POST code\))S
25 35.6 M(4. )S
(All the checks performed by POST with interrupts disabled)S
25 22.4 M(5. )S
(IVT initialised at address 0)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(1.2 Booting: Overview)S
480.9 0 M(3)S
GR
SP
%%EndPage
%%Page: 4 6
GS
72 36 T
11/F4 SF 25 684.8 M(6. )S
(The BIOS Bootstrap Loader function is invoked via int 0x19 with %dl containing the boot device)S
36 671.6 M('drive number'. This loads track 0, sector 1 at physical address 0x7C00 \(0x07C0:0000\).)S
17/F9 SF 0 617.6 M(1.4 Booting: bootsector and setup)S
11/F4 SF 0 578 M(The bootsector used to boot Linux kernel could be either:)S
11/Fc SF 28.2 538.4 M(\267 )S
11/F4 SF (Linux bootsector, arch/i386/boot/bootsect.S)S
11/Fc SF 28.2 525.2 M(\267 )S
11/F4 SF (LILO \(or other bootloader's\) bootsector)S
11/Fc SF 28.2 512 M(\267 )S
11/F4 SF (No bootsector \(loadlin etc\))S
0 485.6 M(We consider here the Linux bootsector in detail. The first few lines initialize the convenience macros to be)S
0 472.4 M(used for segment values:)S
36 437.4 M 415.0 2.0 F
9/F0 SF 36 420 M(29 SETUPSECS = 4                /* default nr of setup-sectors */)S
36 409.2 M(30 BOOTSEG   = 0x07C0           /* original address of boot-sector */)S
36 398.4 M(31 INITSEG   = DEF_INITSEG      /* we move boot here - out of the way */)S
36 387.6 M(32 SETUPSEG  = DEF_SETUPSEG     /* setup starts here */)S
36 376.8 M(33 SYSSEG    = DEF_SYSSEG       /* system loaded at 0x10000 \(65536\) */)S
36 366 M(34 SYSSIZE   = DEF_SYSSIZE      /* system size: # of 16-byte clicks */)S
36 357.4 M 415.0 2.0 F
11/F4 SF 0 311.2 M(\(the numbers on the left are the line numbers of bootsect.S file\) The values of DEF_INITSEG,)S
0 298 M(DEF_SETUPSEG, DEF_SYSSEG, DEF_SYSSIZE are taken from )S
11/F0 SF (include/asm/boot.h)S
11/F4 SF (:)S
36 263 M 415.0 2.0 F
9/F0 SF 36 245.6 M(/* Don't touch these, unless you really know what you're doing. */)S
36 234.8 M(#define DEF_INITSEG     0x9000)S
36 224 M(#define DEF_SYSSEG      0x1000)S
36 213.2 M(#define DEF_SETUPSEG    0x9020)S
36 202.4 M(#define DEF_SYSSIZE     0x7F00)S
36 193.8 M 415.0 2.0 F
11/F4 SF 0 147.6 M(Now, let us consider the actual code of bootsect.S:)S
36 112.6 M 415.0 2.0 F
9/F0 SF 36 95.2 M(    54          movw    $BOOTSEG, %ax)S
36 84.4 M(    55          movw    %ax, %ds)S
36 73.6 M(    56          movw    $INITSEG, %ax)S
36 62.8 M(    57          movw    %ax, %es)S
36 52 M(    58          movw    $256, %cx)S
36 41.2 M(    59          subw    %si, %si)S
36 30.4 M(    60          subw    %di, %di)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(1.4 Booting: bootsector and setup)S
480.9 0 M(4)S
GR
SP
%%EndPage
%%Page: 5 7
GS
72 36 T
9/F0 SF 36 687.2 M(    61          cld)S
36 676.4 M(    62          rep)S
36 665.6 M(    63          movsw)S
36 654.8 M(    64          ljmp    $INITSEG, $go)S
36 644 M(       )S
36 633.2 M(    65  # bde - changed 0xff00 to 0x4000 to use debugger at 0x6400 up \(bde\).  We)S
36 622.4 M(    66  # wouldn't have to worry about this if we checked the top of memory.  Also)S
36 611.6 M(    67  # my BIOS can be configured to put the wini drive tables in high memory)S
36 600.8 M(    68  # instead of in the vector table.  The old stack might have clobbered the)S
36 590 M(    69  # drive table.)S
36 579.2 M(       )S
36 568.4 M(    70  go:     movw    $0x4000-12, %di         # 0x4000 is an arbitrary value >=)S
36 557.6 M(    71                                          # length of bootsect + length of)S
36 546.8 M(    72                                          # setup + room for stack;)S
36 536 M(    73                                          # 12 is disk parm size.)S
36 525.2 M(    74          movw    %ax, %ds                # ax and es already contain INITSEG)S
36 514.4 M(    75          movw    %ax, %ss)S
36 503.6 M(    76          movw    %di, %sp                # put stack at INITSEG:0x4000-12.)S
36 495 M 415.0 2.0 F
11/F4 SF 0 448.8 M(The lines 54-63 move the bootsector code from address 0x7C00 to 0x90000. This is achieved by:)S
25 409.2 M(1. )S
(set %ds:%si to $BOOTSEG:0 \(0x7C0:0 = 0x7C00\))S
25 396 M(2. )S
(set %es:%di to $INITSEG:0 \(0x9000:0 = 0x90000\))S
25 382.8 M(3. )S
(set the number of 16bit words in %cx \(256 words = 512 bytes = 1 sector\))S
25 369.6 M(4. )S
(clear DF \(direction\) flag in EFLAGS to auto-increment addresses \(cld\))S
25 356.4 M(5. )S
(go ahead and copy 512 bytes \(rep movsw\))S
0 330 M(The reason this code does not use "rep movsd" is intentional \(hint - .code16\).)S
0 303.6 M(The line 64 jumps to the label "go:" in the newly made copy of the bootsector, i.e. in the segment 0x9000.)S
0 290.4 M(This and the following three instructions \(lines 64-76\) prepare the stack at $INITSEG:0x4000-12, i.e. %ss =)S
0 277.2 M($INITSEG \(0x9000\) and %sp = 0x3FEE \(0x4000-12\). This is where the limit on setup size comes from that)S
0 264 M(we mentioned earlier \(see Building the Linux Kernel Image\).)S
0 237.6 M(The lines 77-103 patch the disk parameter table for the first disk to allow multi-sector reads:)S
36 202.6 M 415.0 2.0 F
9/F0 SF 36 185.2 M(    77  # Many BIOS's default disk parameter tables will not recognize)S
36 174.4 M(    78  # multi-sector reads beyond the maximum sector number specified)S
36 163.6 M(    79  # in the default diskette parameter tables - this may mean 7)S
36 152.8 M(    80  # sectors in some cases.)S
36 142 M(    81  #)S
36 131.2 M(    82  # Since single sector reads are slow and out of the question,)S
36 120.4 M(    83  # we must take care of this by creating new parameter tables)S
36 109.6 M(    84  # \(for the first disk\) in RAM.  We will set the maximum sector)S
36 98.8 M(    85  # count to 36 - the most we will encounter on an ED 2.88.  )S
36 88 M(    86  #)S
36 77.2 M(    87  # High doesn't hurt.  Low does.)S
36 66.4 M(    88  #)S
36 55.6 M(    89  # Segments are as follows: ds = es = ss = cs - INITSEG, fs = 0,)S
36 44.8 M(    90  # and gs is unused.)S
36 34 M(       )S
36 23.2 M(    91          movw    %cx, %fs                # set fs to 0)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(1.4 Booting: bootsector and setup)S
480.9 0 M(5)S
GR
SP
%%EndPage
%%Page: 6 8
GS
72 36 T
9/F0 SF 36 687.2 M(    92          movw    $0x78, %bx              # fs:bx is parameter table address)S
36 676.4 M(    93          pushw   %ds)S
36 665.6 M(    94          ldsw    %fs:\(%bx\), %si          # ds:si is source)S
36 654.8 M(    95          movb    $6, %cl                 # copy 12 bytes)S
36 644 M(    96          pushw   %di                     # di = 0x4000-12.)S
36 633.2 M(    97          rep                             # don't need cld -> done on line 66)S
36 622.4 M(    98          movsw)S
36 611.6 M(    99          popw    %di)S
36 600.8 M(   100          popw    %ds)S
36 590 M(   101          movb    $36, 0x4\(%di\)           # patch sector count)S
36 579.2 M(   102          movw    %di, %fs:\(%bx\))S
36 568.4 M(   103          movw    %es, %fs:2\(%bx\))S
36 559.8 M 415.0 2.0 F
11/F4 SF 0 513.6 M(The floppy disk controller is reset using BIOS service int 0x13 function 0 "reset FDC" and setup sectors are)S
0 500.4 M(loaded immediately after the bootsector, i.e. at physical address 0x90200 \($INITSEG:0x200\), again using)S
0 487.2 M(BIOS service int 0x13, function 2 "read sector\(s\)". This happens during lines 107-124:)S
36 465.4 M 415.0 2.0 F
9/F0 SF 36 448 M(   107  load_setup:)S
36 437.2 M(   108          xorb    %ah, %ah                # reset FDC )S
36 426.4 M(   109          xorb    %dl, %dl)S
36 415.6 M(   110          int     $0x13   )S
36 404.8 M(   111          xorw    %dx, %dx                # drive 0, head 0)S
36 394 M(   112          movb    $0x02, %cl              # sector 2, track 0)S
36 383.2 M(   113          movw    $0x0200, %bx            # address = 512, in INITSEG)S
36 372.4 M(   114          movb    $0x02, %ah              # service 2, "read sector\(s\)")S
36 361.6 M(   115          movb    setup_sects, %al        # \(assume all on head 0, track 0\))S
36 350.8 M(   116          int     $0x13                   # read it)S
36 340 M(   117          jnc     ok_load_setup           # ok - continue)S
36 329.2 M(       )S
36 318.4 M(   118          pushw   %ax                     # dump error code)S
36 307.6 M(   119          call    print_nl)S
36 296.8 M(   120          movw    %sp, %bp)S
36 286 M(   121          call    print_hex)S
36 275.2 M(   122          popw    %ax     )S
36 264.4 M(   123          jmp     load_setup)S
36 253.6 M(       )S
36 242.8 M(   124  ok_load_setup:)S
36 234.2 M 415.0 2.0 F
11/F4 SF 0 201.2 M(If loading failed for some reason \(bad floppy or someone pulled the diskette out during the operation\) then)S
0 188 M(we dump error code and retry in an endless loop. The only way to get out of it is to reboot the machine,)S
0 174.8 M(unless retry succeeds but usually it doesn't \(if something is wrong it will only get worse\).)S
0 148.4 M(If loading setup_sects sectors of setup code succeeded we jump to label "ok_load_setup:")S
0 122 M(Then we proceed to load the compressed kernel image at physical address 0x10000. This is done to preserve)S
0 108.8 M(the firmware data areas in low memory \(0-64K\). After the kernel is loaded we jump to $SETUPSEG:0)S
0 95.6 M(\(arch/i386/boot/setup.S\). Once the data is no longer needed \(e.g. no more calls to BIOS\) it is overwritten by)S
0 82.4 M(moving the entire \(compressed\) kernel image from 0x10000 to 0x1000 \(physical addresses, of course\). This)S
0 69.2 M(is done by setup.S which sets things up for protected mode and jumps to 0x1000 which is the head of the)S
0 56 M(compressed kernel, i.e. arch/386/boot/compressed/{head.S,misc.c}. This sets up stack and calls)S
0 42.8 M(decompress_kernel\(\) which uncompresses the kernel to address 0x100000 and jumps to it.)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(1.4 Booting: bootsector and setup)S
480.9 0 M(6)S
GR
SP
%%EndPage
%%Page: 7 9
GS
72 36 T
11/F4 SF 0 684.8 M(Note that the old bootloaders \(old versions of LILO\) could only load the first 4 sectors of setup so there is)S
0 671.6 M(code in setup to load the rest of itself if needed. Also, the code in setup has to take care of various)S
0 658.4 M(combinations of loader type/version vs zImage/bzImage and is therefore highly complex.)S
0 632 M(Let us examine the kludge in the bootsector code that allows to load a big kernel, known also as "bzImage".)S
0 618.8 M(The setup sectors are loaded as usual at 0x90200 but the kernel is loaded 64K chunk at a time using a special)S
0 605.6 M(helper routine that calls BIOS to move data from low to high memory. This helper routine is referred to by)S
0 592.4 M(bootsect_kludge in bootsect.S and is defined as bootsect_helper in setup.S. The bootsect_kludge label in)S
0 579.2 M(setup.S contains the value of setup segment and the offset of bootsect_helper code in it so that bootsector can)S
0 566 M(use lcall instruction to jump to it \(inter-segment jump\). The reason why it is in setup.S is simply because)S
0 552.8 M(there is no more space left in bootsect.S \(which is strictly not true - there are approx 4 spare bytes and at)S
0 539.6 M(least 1 spare byte in bootsect.S but that is not enough, obviously\). This routine uses BIOS service int 0x15)S
0 526.4 M(\(ax=0x8700\) to move to high memory and resets %es to always point to 0x10000 so that the code in)S
0 513.2 M(bootsect.S doesn't run out of low memory when copying data from disk.)S
17/F9 SF 0 459.2 M(1.5 Using LILO as a bootloader)S
11/F4 SF 0 419.6 M(There are several advantages in using a specialized bootloader \(LILO\) over a bare bones Linux bootsector:)S
25 393.2 M(1. )S
(Ability to choose between multiple Linux kernels or even multiple OSes.)S
25 380 M(2. )S
(Ability to pass kernel command line parameters \(there is a patch called BCP that adds this ability to)S
36 366.8 M(bare-bones bootsector+setup\))S
25 353.6 M(3. )S
(Ability to load much larger bzImage kernels - up to 2.5M vs 1M)S
0 327.2 M(Old versions of LILO \(v17 and earlier\) could not load bzImage kernels. The newer versions \(as of a couple of)S
0 314 M(years ago or earlier\) use the same technique as bootsect+setup of moving data from low into high memory by)S
0 300.8 M(means of BIOS services. Some people \(Peter Anvin notably\) argue that zImage support should be removed.)S
0 287.6 M(The main reason \(according to Alan Cox\) it stays is that there are apparently some broken BIOSes that make)S
0 274.4 M(it impossible to boot bzImage kernels while loading zImage ones fine.)S
0 248 M(The last thing LILO does is to jump to setup.S and things proceed as normal.)S
17/F9 SF 0 194 M(1.6 High level initialisation)S
11/F4 SF 0 154.4 M(By "high-level initialisation" we consider anything which is not directly related to bootstrap, even though)S
0 141.2 M(parts of the code to perform this are written in asm, namely arch/i386/kernel/head.S which is the head of the)S
0 128 M(uncompressed kernel. The following steps are performed:)S
25 88.4 M(1. )S
(initialises segment values \(%ds=%es=%fs=%gs=__KERNEL_DS= 0x18\))S
25 75.2 M(2. )S
(initialises page tables)S
25 62 M(3. )S
(enables paging by setting PG bit in %cr0)S
25 48.8 M(4. )S
(zero-cleans BSS \(on SMP, only first CPU does this\))S
25 35.6 M(5. )S
(copies the first 2k of bootup parameters \(kernel commandline\))S
25 22.4 M(6. )S
(checks CPU type using EFLAGS and, if possible, cpuid, able to detect 386 and higher)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(1.5 Using LILO as a bootloader )S
480.9 0 M(7)S
GR
SP
%%EndPage
%%Page: 8 10
GS
72 36 T
11/F4 SF 25 684.8 M(7. )S
(the first CPU calls start_kernel\(\), all others call arch/i386/kernel/smpboot.c:initialize_secondary\(\) if)S
36 671.6 M(ready=1, which just reloads esp/eip and doesn't return.)S
0 645.2 M(The init/main.c:start_kernel\(\) is written in C and does the following:)S
25 605.6 M(1. )S
(takes a global kernel lock \(it is needed so that only one CPU goes through initialisation\))S
25 592.4 M(2. )S
(performs arch-specific setup \(memory layout analysis, copying boot command line again, etc.\))S
25 579.2 M(3. )S
(prints Linux kernel "banner" containing the version, compiler used to build it etc. to the kernel ring)S
36 566 M(buffer for messages. This is taken from the variable linux_banner defined in init/version.c and is the)S
36 552.8 M(same string as displayed by "cat /proc/version".)S
25 539.6 M(4. )S
(initialises traps)S
25 526.4 M(5. )S
(initialises irqs)S
25 513.2 M(6. )S
(initialises data required for scheduler)S
25 500 M(7. )S
(initialises time keeping data)S
25 486.8 M(8. )S
(initialises softirq subsystem)S
25 473.6 M(9. )S
(parses boot commandline options)S
19.5 460.4 M(10. )S
(initialises console)S
19.5 447.2 M(11. )S
(if module support was compiled into the kernel, initialises dynamical module loading facility)S
19.5 434 M(12. )S
(if "profile=" command line was supplied initialises profiling buffers)S
19.5 420.8 M(13. )S
(kmem_cache_init\(\), initialises most of slab allocator)S
19.5 407.6 M(14. )S
(enables interrupts)S
19.5 394.4 M(15. )S
(calculates BogoMips value for this CPU)S
19.5 381.2 M(16. )S
(calls mem_init\(\) which calculates max_mapnr, totalram_pages and high_memory and prints out the)S
36 368 M("Memory: ..." line)S
19.5 354.8 M(17. )S
(kmem_cache_sizes_init\(\), finishes slab allocator initialisation)S
19.5 341.6 M(18. )S
(initialises data structures used by procfs)S
19.5 328.4 M(19. )S
(fork_init\(\), creates uid_cache, initialises max_threads based on the amount of memory available and)S
36 315.2 M(configures RLIMIT_NPROC for init_task to be max_threads/2)S
19.5 302 M(20. )S
(creates various slab caches needed for VFS, VM, buffer cache etc)S
19.5 288.8 M(21. )S
(if System V IPC support is compiled in, initialises IPC subsystem. Note, that for System V shm this)S
36 275.6 M(includes mounting an internal \(in-kernel\) instance of shmfs filesystem)S
19.5 262.4 M(22. )S
(if quota support is compiled into the kernel, create and initialise a special slab cache for it)S
19.5 249.2 M(23. )S
(performs arch-specific "check for bugs" and, whenever possible, activates workaround for)S
36 236 M(processor/bus/etc bugs. Comparing various architectures reveals that "ia64 has no bugs" and "ia32)S
36 222.8 M(has quite a few bugs", good example is "f00f bug" which is only checked if kernel is compiled for)S
36 209.6 M(less than 686 and worked around accordingly)S
19.5 196.4 M(24. )S
(sets a flag to indicate that a schedule should be invoked at "next opportunity" and creates a kernel)S
36 183.2 M(thread init\(\) which execs execute_command if supplied via "init=" boot parameter or tries to exec)S
36 170 M(/sbin/init,/etc/init,/bin/init,/bin/sh in this order and if all these fail, panics with suggestion to use)S
36 156.8 M("init=" parameter.)S
19.5 143.6 M(25. )S
(goes into the idle loop, this is an idle thread with pid=0)S
0 117.2 M(Important thing to note here that the init\(\) kernel thread calls do_basic_setup\(\) which in turn calls)S
0 104 M(do_initcalls\(\) which goes through the list of functions registered by means of __initcall or module_init\(\))S
0 90.8 M(macros and invokes them. These functions either do not depend on each other or their dependencies have)S
0 77.6 M(been manually fixed by the link order in the Makefiles. This means that depending on the position of)S
0 64.4 M(directories in the trees and the structure of the Makefiles the order initialisation functions are invoked can)S
0 51.2 M(change. Sometimes, this is important because you can imagine two subsystems A and B with B depending on)S
0 38 M(some initialisation done by A. If A is compiled statically and B is a module then B's entry point is guaranteed)S
0 24.8 M(to be invoked after A prepared all the necessary environment. If A is a module, then B is also necessarily a)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(1.5 Using LILO as a bootloader )S
480.9 0 M(8)S
GR
SP
%%EndPage
%%Page: 9 11
GS
72 36 T
11/F4 SF 0 684.8 M(module so there are no problems. But what if both A and B are statically linked into the kernel? The order)S
0 671.6 M(they are invoked depends on the relative entry point offsets in the ".initcall.init" ELF section of the kernel)S
0 658.4 M(image. Rogier Wolff proposed to introduce the hierarchical "priority" infrastructure whereby modules could)S
0 645.2 M(let the linker know in what \(relative\) order they should be linked but so far there are no patches available that)S
0 632 M(implement this in a sufficiently elegant manner to be acceptable into the kernel. Therefore - make sure your)S
0 618.8 M(link order is correct, if, in the example above, A and B work fine when compiled statically once they will)S
0 605.6 M(work always provided they are listed sequentially in the same Makefile. If they don't work change the order)S
0 592.4 M(their object files are listed.)S
0 566 M(Another thing worthy of note is Linux's ability to execute "alternative init program" by means of passing)S
0 552.8 M("init=" boot commandline. This is useful for recovering from accidentally overwritten "/sbin/init" or)S
0 539.6 M(debugging the initialisation \(rc\) scripts and /etc/inittab by hand, executing them one at a time.)S
17/F9 SF 0 485.6 M(1.7 SMP Bootup on x86)S
11/F4 SF 0 446 M(On SMP, the BP goes through the normal sequence of bootsector, setup etc until it reaches the start_kernel\(\))S
0 432.8 M(and then on to smp_init\(\) and especially src/i386/kernel/smpboot.c:smp_boot_cpus\(\). The smp_boot_cpus\(\))S
0 419.6 M(goes in a loop for each apicid \(until NR_CPUS\) and calls do_boot_cpu\(\) on it. What do_boot_cpu\(\) does is)S
0 406.4 M(create \(i.e. fork_by_hand\) an idle task for the target cpu and writes in well-known locations defined by the)S
0 393.2 M(Intel MP spec \(0x467/0x469\) the eip of trampoline code found in trampoline.S. Then it generates STARTUP)S
0 380 M(IPI to the target cpu which makes this AP execute the code in trampoline.S.)S
0 353.6 M(The boot CPU creates a copy of trampoline code for each CPU in the low memory. The AP code writes a)S
0 340.4 M(magic number in its own code which is verified by the BP to make sure that AP is executing the trampoline)S
0 327.2 M(code. The requirement that trampoline code must be in low memory is enforced by the Intel MP specification.)S
0 300.8 M(The trampoline code simply sets %bx register to 1, enters protected mode and jumps to startup_32 which is)S
0 287.6 M(the main entry to arch/i386/kernel/head.S.)S
0 261.2 M(Now, the AP starts executing head.S and discovering that it is not a BP, it skips the code that clears BSS and)S
0 248 M(then enters initialise_secondary\(\) which just enters the idle task for this CPU - recall that init_tasks[cpu] was)S
0 234.8 M(already initialised by BP executing do_boot_cpu\(cpu\).)S
0 208.4 M(Note, that init_task can be shared but each idle thread must have its own TSS so init_tss[NR_CPUS] is an)S
0 195.2 M(array.)S
17/F9 SF 0 141.2 M(1.8 Freeing initialisation data and code)S
11/F4 SF 0 101.6 M(When the operating system initialises itself most of the code and data structures are never needed again. Most)S
0 88.4 M(operating systems \(BSD, FreeBSD etc.\) cannot dispose of this unneeded information thus wasting the)S
0 75.2 M(precious physical kernel memory. The excuse they use \(see McKusick's 4.4BSD book\) is that "the relevant)S
0 62 M(code is spread around various subsystems and so it is not feasible to free it". Linux, of course, cannot use)S
0 48.8 M(such excuses because under Linux "if something is possible in principle, then it is already implemented or)S
0 35.6 M(somebody is working on it".)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(1.7 SMP Bootup on x86)S
480.9 0 M(9)S
GR
SP
%%EndPage
%%Page: 10 12
GS
72 36 T
11/F4 SF 0 684.8 M(So, as I said earlier, Linux kernel can only be compiled as ELF binary and now we find out the reason \(or one)S
0 671.6 M(of the reasons\) for that. The reason related to throwing away initialisation code/data is that Linux provides)S
0 658.4 M(two macros to be used:)S
11/Fc SF 28.2 618.8 M(\267 )S
11/F4 SF (__init - for initialisation code)S
11/Fc SF 28.2 605.6 M(\267 )S
11/F4 SF (__initdata - for data)S
0 579.2 M(These evaluate to gcc attribute specificators \(also known as "gcc magic"\) as defined in include/linux/init.h:)S
36 544.2 M 415.0 2.0 F
9/F0 SF 36 526.8 M(#ifndef MODULE)S
36 516 M(#define __init        __attribute__ \(\(__section__ \(".text.init"\)\)\))S
36 505.2 M(#define __initdata    __attribute__ \(\(__section__ \(".data.init"\)\)\))S
36 494.4 M(#else)S
36 483.6 M(#define __init)S
36 472.8 M(#define __initdata)S
36 462 M(#endif)S
36 453.4 M 415.0 2.0 F
11/F4 SF 0 407.2 M(What this means is that if the code is compiled statically into the kernel \(i.e. MODULE is not defined\) then it)S
0 394 M(is placed in the special ELF section ".text.init" which is declared in the linker map in arch/i386/vmlinux.lds.)S
0 380.8 M(Otherwise \(i.e. if it is a module\) the macros evaluate to nothing.)S
0 354.4 M(What happens during boot is that the "init" kernel thread \(function init/main.c:init\(\)\) calls the arch-specific)S
0 341.2 M(function free_initmem\(\) which frees all the pages between addresses __init_begin and __init_end.)S
0 314.8 M(On a typical system \(my workstation\), this results in freeing about 260K of memory.)S
0 288.4 M(The functions registered via module_init\(\) are placed in ".initcall.init" which is also freed in the static case.)S
0 275.2 M(The current trend in Linux, when designing a subsystem \(not necessarily a module\) is to provide init/exit)S
0 262 M(entry points from the early stages of design so that in the future the subsystem in question can be modularized)S
0 248.8 M(if needed. Example of this is pipefs, see fs/pipe.c. Even if subsystem will never become a module, e.g.)S
0 235.6 M(bdflush \(see fs/buffer.c\) it is still nice and tidy to use module_init\(\) macro against its initialisation function,)S
0 222.4 M(provided it does not matter when exactly is the function called.)S
0 196 M(There are two more macros which which work very similar, called __exit and __exitdata but they are more)S
0 182.8 M(directly connected to the module support and therefore will be explained in a later section.)S
17/F9 SF 0 128.8 M(1.9 Processing kernel command line)S
11/F4 SF 0 89.2 M(Let us recall what happens to the commandline passed to kernel during boot.)S
25 49.6 M(1. )S
(LILO \(or BCP\) accepts the commandline using BIOS keyboard services and stores it at a)S
36 36.4 M(well-known location in physical memory, as well as a signature saying that there is a valid)S
36 23.2 M(commandline there)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(1.9 Processing kernel command line)S
474.8 0 M(10)S
GR
SP
%%EndPage
%%Page: 11 13
GS
72 36 T
11/F4 SF 25 684.8 M(2. )S
(arch/i386/kernel/head.S copies the first 2k of it out to the zeropage. Note that current version \(21\) of)S
36 671.6 M(LILO chops the commandline to 79 bytes. This is a nontrivial bug in LILO \(when large EBDA)S
36 658.4 M(support is enabled\) and Werner promised to fix it sometime soon. If you really need to pass)S
36 645.2 M(commandlines longer than 79 bytes then you can either use BCP or hardcode your commandline in)S
36 632 M(arch/i386/kernel/setup.c:parse_mem_cmdline\(\) function)S
25 618.8 M(3. )S
(arch/i386/kernel/setup.c:parse_mem_cmdline\(\) \(called by setup_arch\(\) called by start_kernel\(\)\))S
36 605.6 M(copies 256 bytes from zeropage into saved_command_line which is displayed by /proc/cmdline. This)S
36 592.4 M(same routine processes "mem=" portion and makes appropriate adjustments to VM parameters)S
25 579.2 M(4. )S
(we return to commandline in parse_options\(\) \(called by start_kernel\(\)\) which processes some)S
36 566 M("in-kernel" parameters \(currently "init=" and environment/arguments for init\) and passes each word)S
36 552.8 M(to checksetup\(\))S
25 539.6 M(5. )S
(checksetup\(\) goes through the code in ELF section ".setup.init" and invokes each function passing it)S
36 526.4 M(the word if it matches. Note that using the return value of 0 from the function registered via __setup\(\))S
36 513.2 M(it is possible to pass the same "variable=value" to more than one function with "value" invalid to one)S
36 500 M(and valid to another. Jeff Garzik commented: "hackers who do that get spanked :\)" Why? Because)S
36 486.8 M(this is clearly ld-order specific, i.e. kernel linked in one order will have functionA invoked before)S
36 473.6 M(functionB and another will have it in reversed order with the result depending on the order)S
0 447.2 M(So, how do we write code that processes boot commandline? We use __setup\(\) macro defined in)S
0 434 M(include/linux/init.h:)S
36 399 M 415.0 2.0 F
9/F0 SF 36 381.6 M()S
36 370.8 M(/*)S
36 360 M( * Used for kernel command line parameter setup)S
36 349.2 M( */)S
36 338.4 M(struct kernel_param {)S
36 327.6 M(        const char *str;)S
36 316.8 M(        int \(*setup_func\)\(char *\);)S
36 306 M(};)S
36 295.2 M()S
36 284.4 M(extern struct kernel_param __setup_start, __setup_end;)S
36 273.6 M()S
36 262.8 M(#ifndef MODULE)S
36 252 M(#define __setup\(str, fn\) \\)S
36 241.2 M(   static char __setup_str_##fn[] __initdata = str; \\)S
36 230.4 M(   static struct kernel_param __setup_##fn __initsetup = \\)S
36 219.6 M(   { __setup_str_##fn, fn })S
36 208.8 M()S
36 198 M(#else)S
36 187.2 M(#define __setup\(str,func\) /* nothing */)S
36 176.4 M(endif)S
36 167.8 M 415.0 2.0 F
11/F4 SF 0 121.6 M(So, you would typically use it in your code like this \(taken from code of real driver, BusLogic HBA)S
0 108.4 M(drivers/scsi/BusLogic.c\):)S
36 73.4 M 415.0 2.0 F
9/F0 SF 36 56 M(static int __init)S
36 45.2 M(BusLogic_Setup\(char *str\))S
36 34.4 M({)S
36 23.6 M(        int ints[3];)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(1.9 Processing kernel command line)S
474.8 0 M(11)S
GR
SP
%%EndPage
%%Page: 12 14
GS
72 36 T
9/F0 SF 36 687.2 M()S
36 676.4 M(        \(void\)get_options\(str, ARRAY_SIZE\(ints\), ints\);)S
36 665.6 M()S
36 654.8 M(        if \(ints[0] != 0\) {)S
36 644 M(                BusLogic_Error\("BusLogic: Obsolete Command Line Entry ")S
36 633.2 M(                                "Format Ignored\\n", NULL\);)S
36 622.4 M(                return 0;)S
36 611.6 M(        })S
36 600.8 M(        if \(str == NULL || *str == '\\0'\))S
36 590 M(                return 0;)S
36 579.2 M(        return BusLogic_ParseDriverOptions\(str\);)S
36 568.4 M(})S
36 557.6 M()S
36 546.8 M(__setup\("BusLogic=", BusLogic_Setup\);)S
36 538.2 M 415.0 2.0 F
11/F4 SF 0 492 M(Note, that for modules __setup\(\) does nothing so the code that wishes to process boot commandline and can)S
0 478.8 M(be either a module or statically linked must invoke its parsing function manually in the module initialisation)S
0 465.6 M(routine "manually". This also means that it is possible to write code that processes parameters when compiled)S
0 452.4 M(as a module but not when it is static or vice versa.)S
0 430.6 M 487.0 2.0 F
17/F9 SF 0 383.2 M(2.Process and Interrupt Management)S
0 316 M(2.1 Task Structure and Process Table)S
11/F4 SF 0 276.4 M(Every process under Linux is dynamically allocated a 'struct task_struct' structure. The maximum number of)S
0 263.2 M(processes that can be created on the Linux system is limited only by the amount of physical memory present,)S
0 250 M(and is equal to \(see kernel/fork.c:fork_init\(\)\):)S
36 215 M 415.0 2.0 F
9/F0 SF 36 197.6 M(        /*)S
36 186.8 M(         * The default maximum number of threads is set to a safe)S
36 176 M(         * value: the thread structures can take up at most half)S
36 165.2 M(         * of memory.)S
36 154.4 M(         */)S
36 143.6 M(        max_threads = mempages / \(THREAD_SIZE/PAGE_SIZE\) / 2;)S
36 135 M 415.0 2.0 F
11/F4 SF 0 88.8 M(which on IA32 architecture basically means 'num_physpages/4' so, for example on 512M machine you can)S
0 75.6 M(create 32k threads which is a considerable improvement over the 4k-epsilon limit for older \(2.2 and earlier\))S
0 62.4 M(kernels. Moreover, this can be changed at runtime using KERN_MAX_THREADS sysctl\(2\) or simply using)S
0 49.2 M(procfs interface to kernel tunables:)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.Process and Interrupt Management)S
474.8 0 M(12)S
GR
SP
%%EndPage
%%Page: 13 15
GS
72 36 T
36 689.4 M 415.0 2.0 F
9/F0 SF 36 672 M(# cat /proc/sys/kernel/threads-max )S
36 661.2 M(32764)S
36 650.4 M(# echo 100000 > /proc/sys/kernel/threads-max )S
36 639.6 M(# cat /proc/sys/kernel/threads-max )S
36 628.8 M(100000)S
36 618 M(# gdb -q vmlinux /proc/kcore)S
36 607.2 M(Core was generated by `BOOT_IMAGE=240ac18 ro root=306 video=matrox:vesa:0x118'.)S
36 596.4 M(#0  0x0 in ?? \(\))S
36 585.6 M(\(gdb\) p max_threads)S
36 574.8 M($1 = 100000)S
36 566.2 M 415.0 2.0 F
11/F4 SF 0 520 M(The set of processes on the Linux system is represented as a collection of 'struct task_struct' structures which)S
0 506.8 M(are linked in two ways:)S
25 467.2 M(1. )S
(as a hashtable, hashed by pid)S
25 454 M(2. )S
(as a circular, doubly-linked list using p->next_task and p->prev_task pointers)S
0 427.6 M(The hashtable is called pidhash[] and is defined in include/linux/sched.h:)S
36 392.6 M 415.0 2.0 F
9/F0 SF 36 375.2 M(/* PID hashing. \(shouldnt this be dynamic?\) */)S
36 364.4 M(#define PIDHASH_SZ \(4096 >> 2\))S
36 353.6 M(extern struct task_struct *pidhash[PIDHASH_SZ];)S
36 342.8 M()S
36 332 M(#define pid_hashfn\(x\)   \(\(\(\(x\) >> 8\) ^ \(x\)\) & \(PIDHASH_SZ - 1\)\))S
36 323.4 M 415.0 2.0 F
11/F4 SF 0 277.2 M(The tasks are hashed by their pid value and the above hashing function is supposed to distribute the elements)S
0 264 M(uniformly in their domain \(0 to PID_MAX-1\). The hashtable is used to quickly find a task by given pid,)S
0 250.8 M(using find_task_pid\(\) inline from include/linux/sched.h:)S
36 215.8 M 415.0 2.0 F
9/F0 SF 36 198.4 M(static inline struct task_struct *find_task_by_pid\(int pid\))S
36 187.6 M({)S
36 176.8 M(        struct task_struct *p, **htable = &pidhash[pid_hashfn\(pid\)];)S
36 166 M()S
36 155.2 M(        for\(p = *htable; p && p->pid != pid; p = p->pidhash_next\))S
36 144.4 M(                ;)S
36 133.6 M()S
36 122.8 M(        return p;)S
36 112 M(})S
36 103.4 M 415.0 2.0 F
11/F4 SF 0 57.2 M(The tasks on each hashlist \(i.e. hashed to the same value\) are linked by p->pidhash_next/pidhash_pprev)S
0 44 M(which are used by hash_pid\(\) and unhash_pid\(\) to insert and remove a given process into the hashtable.)S
0 30.8 M(These are done under protection of the rw spinlock called 'tasklist_lock' taken for WRITE.)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.Process and Interrupt Management)S
474.8 0 M(13)S
GR
SP
%%EndPage
%%Page: 14 16
GS
72 36 T
11/F4 SF 0 684.8 M(The circular doubly-linked list that uses p->next_task/prev_task is maintained so that one could go through)S
0 671.6 M(all tasks on the system easily. This is achieved by for_each_task\(\) macro from include/linux/sched.h:)S
36 636.6 M 415.0 2.0 F
9/F0 SF 36 619.2 M(#define for_each_task\(p\) \\)S
36 608.4 M(        for \(p = &init_task ; \(p = p->next_task\) != &init_task ; \))S
36 599.8 M 415.0 2.0 F
11/F4 SF 0 553.6 M(The users of for_each_task\(\) should take tasklist_lock for READ. Note that for_each_task\(\) is using init_task)S
0 540.4 M(to mark the beginning \(and end\) of the list - this is safe because the idle task \(pid 0\) never exits.)S
0 514 M(The modifiers of the process hashtable or/and the process table links, notably fork, exit and ptrace must take)S
0 500.8 M(the tasklist_lock for WRITE. What is more interesting is that the writers must also disable interrupts on the)S
0 487.6 M(local cpu. The reason for this is not trivial. The send_sigio\(\) walks the task list and thus takes tasklist_lock)S
0 474.4 M(for READ and it is called from kill_fasync\(\) in the interrupt context. This is why writers must disable the)S
0 461.2 M(interrupts while the readers don't need to.)S
0 434.8 M(Now that we understand how the task_struct structures are linked together, let us examine the members of)S
0 421.6 M(task_struct. They loosely corresponds to the members of UNIX 'struct proc' and 'struct user' combined)S
0 408.4 M(together.)S
0 382 M(The other versions of UNIX separated the task state information into part which should be kept)S
0 368.8 M(memory-resident at all times \(called 'proc structure' which includes process state, scheduling information)S
0 355.6 M(etc.\) and part which is only needed when the process is running \(called 'u area' which includes file descriptor)S
0 342.4 M(table, disk quota information etc.\). The only reason for such ugly design was that memory was a very scarce)S
0 329.2 M(resource. Modern operating systems \(well, only Linux at the moment but others, e.g. FreeBSD seem to)S
0 316 M(improve in this direction towards Linux\) do not need such separation and therefore maintain process state in a)S
0 302.8 M(kernel memory-resident data structure at all times.)S
0 276.4 M(The task_struct structure is declared in include/linux/sched.h and is currently 1680 bytes in size.)S
0 250 M(The state field is declared as:)S
36 215 M 415.0 2.0 F
9/F0 SF 36 197.6 M(volatile long state;    /* -1 unrunnable, 0 runnable, >0 stopped */)S
36 186.8 M()S
36 176 M(#define TASK_RUNNING            0)S
36 165.2 M(#define TASK_INTERRUPTIBLE      1)S
36 154.4 M(#define TASK_UNINTERRUPTIBLE    2)S
36 143.6 M(#define TASK_ZOMBIE             4)S
36 132.8 M(#define TASK_STOPPED            8)S
36 122 M(#define TASK_EXCLUSIVE          32)S
36 113.4 M 415.0 2.0 F
11/F4 SF 0 67.2 M(Why is TASK_EXCLUSIVE defined as 32 and not 16? Because 16 was used up by TASK_SWAPPING and)S
0 54 M(I forgot to shift TASK_EXCLUSIVE up when I removed all references to TASK_SWAPPING \(sometime in)S
0 40.8 M(2.3.x\).)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.Process and Interrupt Management)S
474.8 0 M(14)S
GR
SP
%%EndPage
%%Page: 15 17
GS
72 36 T
11/F4 SF 0 684.8 M(The volatile in p->state declaration means it can be modified asynchronously \(from interrupt handler\):)S
25 645.2 M(1. )S
11/F5 SF (TASK_RUNNING)S
11/F4 SF ( means the task is "supposed to be" on the run queue. The reason it may not yet)S
36 632 M(be on the runqueue is that marking task as TASK_RUNNING and placing it on the runqueue is not)S
36 618.8 M(atomic, however if you look at the queue under protection of runqueue_lock then every)S
36 605.6 M(TASK_RUNNING is on the runqueue. The converse is not true. Namely, drivers can mark)S
36 592.4 M(themselves \(or rather the process context they run in\) as TASK_INTERRUPTIBLE \(or)S
36 579.2 M(UNINTERRUPTIBLE\) and then call schedule\(\) which removes it from the runqueue \(unless there is)S
36 566 M(a pending signal, in which case it is left on the runqueue\). speaking not true because setting)S
36 552.8 M(state=TASK_RUNNING and placing task on the runq by wake_up_process\(\) is not atomic so you)S
36 539.6 M(can see \(very briefly\) TASK_RUNNING tasks not yet on the runq.)S
11/F5 SF 36 526.4 M(TASK_INTERRUPTIBLE)S
11/F4 SF ( means the task is sleeping but can be woken up by a signal or by expiry)S
36 513.2 M(of a timer. )S
11/F5 SF (TASK_UNINTERRUPTIBLE)S
11/F4 SF ( same as TASK_INTERRUPTIBLE, except it cannot be)S
36 500 M(woken up. )S
11/F5 SF (TASK_ZOMBIE)S
11/F4 SF ( task has terminated but has not had its status collected \(wait\(\)-ed for\))S
36 486.8 M(by the parent \(natural or by adoption\). )S
11/F5 SF (TASK_STOPPED)S
11/F4 SF ( task was stopped either due to job control)S
36 473.6 M(signals or due to ptrace\(2\). )S
11/F5 SF (TASK_EXCLUSIVE)S
11/F4 SF ( this is not a separate state but can be OR-ed to)S
36 460.4 M(either one of the TASK_INTERRUPTIBLE or TASK_UNINTERRUPTIBLE. This means that when)S
36 447.2 M(this task is sleeping on a wait queue with many other tasks, it will be woken up alone instead of)S
36 434 M(causing "thundering herd" problem by waking up all the waiters.)S
0 407.6 M(Task flags contain information about the process states which are not mutually exclusive:)S
36 385.8 M 415.0 2.0 F
9/F0 SF 36 368.4 M(unsigned long flags;    /* per process flags, defined below */)S
36 357.6 M(/*)S
36 346.8 M( * Per process flags)S
36 336 M( */)S
36 325.2 M(#define PF_ALIGNWARN    0x00000001      /* Print alignment warning msgs */)S
36 314.4 M(                                        /* Not implemented yet, only for 486*/)S
36 303.6 M(#define PF_STARTING     0x00000002      /* being created */)S
36 292.8 M(#define PF_EXITING      0x00000004      /* getting shut down */)S
36 282 M(#define PF_FORKNOEXEC   0x00000040      /* forked but didn't exec */)S
36 271.2 M(#define PF_SUPERPRIV    0x00000100      /* used super-user privileges */)S
36 260.4 M(#define PF_DUMPCORE     0x00000200      /* dumped core */)S
36 249.6 M(#define PF_SIGNALED     0x00000400      /* killed by a signal */)S
36 238.8 M(#define PF_MEMALLOC     0x00000800      /* Allocating memory */)S
36 228 M(#define PF_VFORK        0x00001000      /* Wake up parent in mm_release */)S
36 217.2 M(#define PF_USEDFPU      0x00100000      /* task used FPU this quantum \(SMP\) */)S
36 208.6 M 415.0 2.0 F
11/F4 SF 0 162.4 M(The fields p->has_cpu,p->processor, p->counter, p->priority, p->policy and p->rt_priority are related to)S
0 149.2 M(the scheduler and will be looked at later.)S
0 122.8 M(The fields p->mm and p->active_mm point to the process' address space described by mm_struct structure)S
0 109.6 M(and to the active address space if the process doesn't have a real one \(e.g. kernel threads\) - this is to minimize)S
0 96.4 M(TLB flushes on switching address spaces when the task is scheduled out. So, if we are scheduling-in the)S
0 83.2 M(kernel thread \(which has no p->mm\) then its next->active_mm will be set to the prev->active_mm of the)S
0 70 M(task that was scheduled-out which will be the same as prev->mm if prev->mm != NULL. The address space)S
0 56.8 M(can be shared between threads if CLONE_VM flag is passed to the clone\(2\) system call or by means of)S
0 43.6 M(vfork\(2\) system call.)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.Process and Interrupt Management)S
474.8 0 M(15)S
GR
SP
%%EndPage
%%Page: 16 18
GS
72 36 T
11/F4 SF 0 684.8 M(The fields p->exec_domain and p->personality related to the personality of the task, i.e. to the way certain)S
0 671.6 M(system calls behave in order to emulate "personality" of foreign flavours of UNIX.)S
0 645.2 M(The field p->fs contains filesystem information, which under Linux means three pieces of information:)S
25 605.6 M(1. )S
(root directory's dentry and mountpoint)S
25 592.4 M(2. )S
(alternate root directory's dentry and mountpoint)S
25 579.2 M(3. )S
(current working directory's dentry and mountpoint)S
0 552.8 M(Also, this structure includes a reference count because it can be shared between cloned tasks when)S
0 539.6 M(CLONE_FS flags are passed to the clone\(2\) system call.)S
0 513.2 M(The field p->files contains the file descriptor table. This also can be shared between tasks if CLONE_FILES)S
0 500 M(is specified with clone\(2\) system call.)S
0 473.6 M(The field p->sig contains signal handlers and can be shared between cloned tasks by means of)S
0 460.4 M(CLONE_SIGHAND flag passed to the clone\(2\) system call.)S
17/F9 SF 0 406.4 M(2.2 Creation and termination of tasks and kernel threads)S
11/F4 SF 0 366.8 M(Different books on operating systems define a "process" in different ways, starting from "instance of a)S
0 353.6 M(program in execution" and ending with "that which is produced by clone\(2\) or fork\(2\) system calls". Under)S
0 340.4 M(Linux, there are three kinds of processes:)S
11/Fc SF 28.2 300.8 M(\267 )S
11/F4 SF (Idle Thread)S
11/Fc SF 28.2 287.6 M(\267 )S
11/F4 SF (Kernel Threads)S
11/Fc SF 28.2 274.4 M(\267 )S
11/F4 SF (User Tasks)S
0 248 M(The idle thread is created at compile time for the first CPU and then it is "manually" created for each CPU by)S
0 234.8 M(means of arch-specific fork_by_hand\(\) in arch/i386/kernel/smpboot.c which unrolls fork system call by hand)S
0 221.6 M(\(on some archs\). Idle tasks share one init_task structure but have a private TSS structure in per-CPU array)S
0 208.4 M(init_tss. Idle tasks all have pid = 0 and no other task can share pid, i.e. use CLONE_PID flag to clone\(2\).)S
0 182 M(Kernel threads are created using kernel_thread\(\) function which invokes the clone system call in kernel)S
0 168.8 M(mode. Kernel threads usually have no user address space, i.e. p->mm = NULL because they explicitly do)S
0 155.6 M(exit_mm\(\), e.g. via daemonize\(\) function. Kernel threads can always access kernel address space directly.)S
0 142.4 M(They are allocated pid numbers in the low range. Running at processor's ring 0 implies that the kernel threads)S
0 129.2 M(enjoy all the io privileges and cannot be pre-empted by the scheduler.)S
0 102.8 M(User tasks are created by means of clone\(2\) or fork\(2\) system calls, both of which internally invoke)S
0 89.6 M(kernel/fork.c:do_fork\(\).)S
0 63.2 M(Let us understand what happens when a user process makes a fork\(2\) system call. Although the fork\(2\))S
0 50 M(system call is architecture-dependent due to the different ways of passing user stack and registers, the actual)S
0 36.8 M(underlying function do_fork\(\) that does the job is portable and is located at kernel/fork.c.)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.2 Creation and termination of tasks and kernel threads)S
474.8 0 M(16)S
GR
SP
%%EndPage
%%Page: 17 19
GS
72 36 T
11/F4 SF 0 684.8 M(The following steps are done:)S
25 645.2 M(1. )S
(Local variable retval is set to -ENOMEM as it is the value errno is set to if fork\(2\) fails to allocate a)S
36 632 M(new task structure)S
25 618.8 M(2. )S
(if CLONE_PID is set in clone_flags then return an error \(-EPERM\) unless the caller is the idle)S
36 605.6 M(thread \(during boot only\). So, normal user threads cannot pass CLONE_PID to clone\(2\) and expect it)S
36 592.4 M(to succeed. For fork\(2\) it is irrelevant as clone_flags is set to SIFCHLD - this is only relevant when)S
36 579.2 M(do_fork\(\) is invoked from sys_clone\(\) which passes the clone_flags from the value requested from)S
36 566 M(userspace)S
25 552.8 M(3. )S
(current->vfork_sem is initialised \(it is later cleared in the child\). This is used by sys_vfork\(\))S
36 539.6 M(\(vfork\(2\) system call, corresponds to clone_flags = CLONE_VFORK|CLONE_VM|SIGCHLD\) to)S
36 526.4 M(make the parent sleep until the child does mm_release\(\) for example as a result of execing another)S
36 513.2 M(program or exit\(2\)-ing)S
25 500 M(4. )S
(A new task structure is allocated using arch-dependent alloc_task_struct\(\) macro, on x86 it is just a)S
36 486.8 M(gfp at GFP_KERNEL priority. This is the first reason why fork\(2\) system call may sleep. If this)S
36 473.6 M(allocation fails we return -ENOMEM)S
25 460.4 M(5. )S
(All the values from current process' task structure are copied into the new one, using structure)S
36 447.2 M(assignment *p = *current. Perhaps this should be replaced by a memset? Later on, the fields that)S
36 434 M(should not be inherited by the child are set to the correct values)S
25 420.8 M(6. )S
(Big kernel lock is taken as the rest of the code would otherwise be non-reentrant)S
25 407.6 M(7. )S
(If the parent has user resources \(a concept of UID, Linux is flexible enough to make it a question)S
36 394.4 M(rather than a fact\), then verify if the user exceeded RLIMIT_NPROC soft limit - if so, fail with)S
36 381.2 M(-EAGAIN, if not, increment the count of processes by given uid p->user->count)S
25 368 M(8. )S
(If the system-wide number of tasks exceeds the value of the tunable max_threads, fail with)S
36 354.8 M(-EAGAIN)S
25 341.6 M(9. )S
(If the binary being executed belongs to a modularised execution domain, increment the)S
36 328.4 M(corresponding module's reference count)S
19.5 315.2 M(10. )S
(If the binary being executed belongs to a modularised binary format, increment the corresponding)S
36 302 M(module's reference count)S
19.5 288.8 M(11. )S
(The child is marked as 'has not execed' p->did_exec = 0)S
19.5 275.6 M(12. )S
(The child is marked as 'not-swappable' p->swappable = 0)S
19.5 262.4 M(13. )S
(The child is put into 'uninterruptible sleep' state p->state = TASK_UNINTERRUPTIBLE \(TODO:)S
36 249.2 M(why is this done? I think it's not needed - get rid of it, Linus confirms it is not needed\))S
19.5 236 M(14. )S
(The child's p->flags are set according to the value of clone_flags, for the plain fork\(2\) it is p->flags)S
36 222.8 M(= PF_FORKNOEXEC.)S
19.5 209.6 M(15. )S
(The childs pid p->pid is set using the fast algorithm in kernel/fork.c:get_pid\(\) \(TODO: lastpid_lock)S
36 196.4 M(spinlock can be made redundant since get_pid\(\) is always called under big kernel lock from)S
36 183.2 M(do_fork\(\), also remove flags argument of get_pid, patch sent to Alan on 20/06/2000 - followup)S
36 170 M(later\).)S
19.5 156.8 M(16. )S
(The rest of the code in do_fork\(\) initialises the rest of child's task structure. At the very end, the)S
36 143.6 M(child's task structure is hashed into pidhash hashtable and the child is woken up \(TODO:)S
36 130.4 M(wake_up_process\(p\) sets p->state = TASK_RUNNING and adds the process to the runq, therefore)S
36 117.2 M(we probably didn't need to set p->state to TASK_RUNNING earlier on in do_fork\(\)\). The interesting)S
36 104 M(part is setting p->exit_signal to clone_flags & CSIGNAL which for fork\(2\) means just SIGCHLD)S
36 90.8 M(and setting p->pdeath_signal to 0. The pdeath_signal is used when a process 'forgets' the original)S
36 77.6 M(parent \(by dying\) and can be set/get by means of PR_GET/SET_PDEATHSIG commands of prctl\(2\))S
36 64.4 M(system call \(You might argue that the way the value of pdeath_signal is returned via userspace)S
36 51.2 M(pointer argument in prctl\(2\) is a bit silly - mea culpa, after Andries Brouwer updated the manpage it)S
36 38 M(was too late to fix ;\))S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.2 Creation and termination of tasks and kernel threads)S
474.8 0 M(17)S
GR
SP
%%EndPage
%%Page: 18 20
GS
72 36 T
11/F4 SF 0 684.8 M(Thus tasks are created. There are several ways for tasks to terminate:)S
25 645.2 M(1. )S
(By making exit\(2\) system call)S
25 632 M(2. )S
(By being delivered a signal with default disposition to die)S
25 618.8 M(3. )S
(By being forced to die under certain exceptions)S
25 605.6 M(4. )S
(By calling bdflush\(2\) with func == 1 \(this is Linux-specific, for compatibility with old distributions)S
36 592.4 M(that still had the 'update' line in /etc/inittab - nowadays the work of update is done by kernel thread)S
36 579.2 M(kupdate)S
0 552.8 M(Functions implementing system calls under Linux are prefixed with 'sys_', but they are usually concerned)S
0 539.6 M(only with argument checking or arch-specific ways to pass some information and the actual work is done by)S
0 526.4 M('do_' functions. So it is with sys_exit\(\) which calls do_exit\(\) to do the work. Although, other parts of the)S
0 513.2 M(kernel sometimes invoke sys_exit\(\), they should really call do_exit\(\).)S
0 486.8 M(The function do_exit\(\) is found in kernel/exit.c. The points to note about do_exit\(\):)S
11/Fc SF 28.2 447.2 M(\267 )S
11/F4 SF (Uses global kernel lock \(locks but doesn't unlock\))S
11/Fc SF 28.2 434 M(\267 )S
11/F4 SF (Calls schedule\(\) at the end which never returns)S
11/Fc SF 28.2 420.8 M(\267 )S
11/F4 SF (Sets the task state to TASK_ZOMBIE)S
11/Fc SF 28.2 407.6 M(\267 )S
11/F4 SF (Notifies any child with current->pdeath_signal, if not 0)S
11/Fc SF 28.2 394.4 M(\267 )S
11/F4 SF (Notifies the parent with a current->exit_signal, which is usually equal to SIGCHLD)S
11/Fc SF 28.2 381.2 M(\267 )S
11/F4 SF (Releases resources allocated by fork, closes open files etc)S
11/Fc SF 28.2 368 M(\267 )S
11/F4 SF (On architectures that use lazy FPU switching \(ia64, mips, mips64, \(TODO: remove 'flags' argument)S
36 354.8 M(of sparc, sparc64\) do whatever the hardware requires to pass the FPU ownership \(if owned by)S
36 341.6 M(current\) to "none")S
17/F9 SF 0 287.6 M(2.3 Linux Scheduler)S
11/F4 SF 0 248 M(The job of a scheduler is to arbitrate access to the current CPU between multiple processes. Scheduler is)S
0 234.8 M(implemented in the 'main kernel file' kernel/sched.c. The corresponding header file include/linux/sched.h is)S
0 221.6 M(included \(either explicitly or indirectly\) by virtually every kernel source file.)S
0 195.2 M(The fields of task structure relevant to scheduler include:)S
11/Fc SF 28.2 155.6 M(\267 )S
11/F4 SF (p->need_resched, set if schedule\(\) should be invoked at the 'next opportunity')S
11/Fc SF 28.2 142.4 M(\267 )S
11/F4 SF (p->counter, number of clock ticks left to run in this scheduling slice, decremented by timer. When)S
36 129.2 M(goes below or equal zero is reset to 0 and p->need_resched set. This is also sometimes called)S
36 116 M('dynamic priority' of a process because it can change by itself)S
11/Fc SF 28.2 102.8 M(\267 )S
11/F4 SF (p->priority, static priority, only changed through well-known system calls like nice\(2\), POSIX.1b)S
36 89.6 M(sched_setparam\(2\) or 4.4BSD/SVR4 setpriority\(2\))S
11/Fc SF 28.2 76.4 M(\267 )S
11/F4 SF (p->rt_priority, realtime priority)S
11/Fc SF 28.2 63.2 M(\267 )S
11/F4 SF (p->policy, scheduling policy, specifies which scheduling class the task belongs to. Tasks can change)S
36 50 M(their scheduling class using sched_setscheduler\(2\) system call. The valid values are)S
36 36.8 M(SCHED_OTHER \(traditional UNIX process\), SCHED_FIFO \(POSIX.1b FIFO realtime process\) and)S
36 23.6 M(SCHED_RR \(POSIX round-robin realtime process\). One can also OR SCHED_YIELD to any of)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.3 Linux Scheduler)S
474.8 0 M(18)S
GR
SP
%%EndPage
%%Page: 19 21
GS
72 36 T
11/F4 SF 36 684.8 M(these values to signify that the process decided to yield the CPU, for example by calling)S
36 671.6 M(sched_yield\(2\) system call. FIFO realtime process runs until either a\) it blocks on I/O b\) explicitly)S
36 658.4 M(yields the CPU or c\) is preempted by another realtime process with a higher p->rt_priority value.)S
36 645.2 M(SCHED_RR is same as SCHED_FIFO except that when it's timeslice expires it goes back to the end)S
36 632 M(of the runqueue)S
0 605.6 M(The scheduler's algorithm is simple, despite the great apparent complexity of the schedule\(\) function. The)S
0 592.4 M(function is complex because it implements three scheduling algorithms in one and also because of the subtle)S
0 579.2 M(SMP-specifics.)S
0 552.8 M(The apparently 'useless' gotos in schedule\(\) are there for a purpose - to generate the best optimized \(for i386\))S
0 539.6 M(code. Also, note that scheduler \(like most of the kernel\) was completely rewritten for 2.4 so the discussion)S
0 526.4 M(below does not apply to 2.2 or to any other old kernels.)S
0 500 M(Let us look at the function in detail:)S
25 460.4 M(1. )S
(if current->active_mm == NULL then something is wrong. Current process, even a kernel thread)S
36 447.2 M(\(current->mm == NULL\) must have a valid p->active_mm at all times)S
25 434 M(2. )S
(if there is something to do on tq_scheduler task queue, process it now. Task queues provide a kernel)S
36 420.8 M(mechanism to schedule execution of functions at a later time. We shall look at it in details elsewhere.)S
25 407.6 M(3. )S
(initialize local variables prev and this_cpu to current task and current CPU respectively)S
25 394.4 M(4. )S
(check if schedule\(\) was invoked from interrupt handler \(due to a bug\) and panic if so)S
25 381.2 M(5. )S
(release the global kernel lock)S
25 368 M(6. )S
(if there is some work to do via softirq mechanism do it now)S
25 354.8 M(7. )S
(initialize local pointer 'struct schedule_data *sched_data' to point to per-CPU \(cacheline-aligned to)S
36 341.6 M(prevent cacheline ping-pong\) scheduling data area containing TSC value of last_schedule and the)S
36 328.4 M(pointer to last scheduled task structure \(TODO: sched_data is used on SMP only but why does)S
36 315.2 M(init_idle\(\) initialises it on UP as well?\))S
25 302 M(8. )S
(runqueue_lock spinlock is taken. Note that we use spin_lock_irq\(\) because in schedule\(\) we)S
36 288.8 M(guarantee that interrupts are enabled so when we unlock runqueue_lock we can just re-enable them)S
36 275.6 M(instead of saving/restoring eflags \(spin_lock_irqsave/restore variant\))S
25 262.4 M(9. )S
(task state machine: if the task is in TASK_RUNNING state it is left alone, if it is in)S
36 249.2 M(TASK_INTERRUPTIBLE and a signal is pending then it is moved into TASK_RUNNING state. In)S
36 236 M(all other cases it is deleted from the runqueue)S
19.5 222.8 M(10. )S
(next \(best candidate to be scheduled\) is set to the idle task of this cpu. However, the goodness of this)S
36 209.6 M(candidate is set to a very low value of -1000 in hope that there is someone better than that.)S
19.5 196.4 M(11. )S
(if the prev \(current\) task is in TASK_RUNNING state, then the current goodness is set to its)S
36 183.2 M(goodness and it is marked as a better candidate to be scheduled than the idle task)S
19.5 170 M(12. )S
(now the runqueue is examined and a goodness of each process that can be scheduled on this cpu is)S
36 156.8 M(compared with current value and the process with highest goodness wins. Now the concept of "can)S
36 143.6 M(be scheduled on this cpu" must be clarified - on UP every process on the runqueue is eligible to be)S
36 130.4 M(scheduled, on SMP only process not already running on another cpu is eligible to be scheduled on)S
36 117.2 M(this cpu. The goodness is calculated by a function called goodness\(\) which treats realtime processes)S
36 104 M(by making their goodness very high 1000 + p->rt_priority, this being greater than 1000 guarantees)S
36 90.8 M(that no SCHED_OTHER process can win so they only contend with other realtime processes that)S
36 77.6 M(may have a greater p->rt_priority. The goodness function returns 0 if the process' time slice)S
36 64.4 M(\(p->counter\) is over. For non-realtime processes the initial value of goodness is set to p->counter -)S
36 51.2 M(this way the process is less likely to get CPU if it already had it for a while, i.e. interactive processes)S
36 38 M(are favoured more than cpu-bound number crunchers. The arch-specific constant)S
36 24.8 M(PROC_CHANGE_PENALTY attempts to implement "cpu affinity" i.e. give advantage to a process)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.3 Linux Scheduler)S
474.8 0 M(19)S
GR
SP
%%EndPage
%%Page: 20 22
GS
72 36 T
11/F4 SF 36 684.8 M(on the same cpu. It also gives slight advantage to processes with mm pointing to current active_mm)S
36 671.6 M(or to processes with no \(user\) address space, i.e. kernel threads.)S
19.5 658.4 M(13. )S
(if the current value of goodness is 0 then the entire list of processes \(not just runqueue!\) is examined)S
36 645.2 M(and their dynamic priorities are recalculated using simple algorithm:)S
72 623.4 M 379.0 2.0 F
9/F0 SF 72 606 M()S
72 595.2 M(recalculate:)S
72 584.4 M(        {)S
72 573.6 M(                struct task_struct *p;)S
72 562.8 M(                spin_unlock_irq\(&runqueue_lock\);)S
72 552 M(                read_lock\(&tasklist_lock\);)S
72 541.2 M(                for_each_task\(p\))S
72 530.4 M(                        p->counter = \(p->counter >> 1\) + p->priority;)S
72 519.6 M(                read_unlock\(&tasklist_lock\);)S
72 508.8 M(                spin_lock_irq\(&runqueue_lock\);)S
72 498 M(        })S
72 489.4 M 379.0 2.0 F
11/F4 SF 36 456.4 M(Note that the we drop the runqueue_lock before we recalculate because we go through entire set of)S
36 443.2 M(processes which can take a long time whilst the schedule\(\) could be called on another cpu and select)S
36 430 M(a process with goodness good enough for that cpu whilst we on this cpu were forced to recalculate.)S
36 416.8 M(Ok, admittedly this is somewhat inconsistent because while we \(on this cpu\) are selecting a process)S
36 403.6 M(with the best goodness, schedule\(\) running on another cpu could be recalculating dynamic priorities)S
19.5 390.4 M(14. )S
(From this point on it is certain that 'next' points to the task to be scheduled so we initialise)S
36 377.2 M(next->has_cpu to 1 and next->processor to this_cpu. The runqueue_lock can now be unlocked.)S
19.5 364 M(15. )S
(If we are switching back to the same task \(next == prev\) then we can simply reacquire the global)S
36 350.8 M(kernel lock and return, i.e. skip all the hardware-level \(registers, stack etc.\) and VM-related \(switch)S
36 337.6 M(page directory, recalculate active_mm etc.\) stuff)S
19.5 324.4 M(16. )S
(The macro switch_to\(\) is architecture specific and \(on i386\) it is concerned with a\) FPU handling b\))S
36 311.2 M(LDT handling c\) reloading segment registers d\) TSS handling and e\) reloading debug registers)S
17/F9 SF 0 257.2 M(2.4 Linux linked list implementation)S
11/F4 SF 0 217.6 M(Before we go on to examine implementation of wait queues we must acquaint ourselves with the Linux)S
0 204.4 M(standard doubly-linked list implementation because wait queues \(as well as everything else in Linux\) makes)S
0 191.2 M(heavy use of them and they are called in jargon "list.h implementation" because the most relevant file is)S
0 178 M(include/linux/list.h.)S
0 151.6 M(The fundamental data structure here is 'struct list_head':)S
36 116.6 M 415.0 2.0 F
9/F0 SF 36 99.2 M(struct list_head {)S
36 88.4 M(        struct list_head *next, *prev;)S
36 77.6 M(};)S
36 66.8 M()S
36 56 M(#define LIST_HEAD_INIT\(name\) { &\(name\), &\(name\) })S
36 45.2 M()S
36 34.4 M(#define LIST_HEAD\(name\) \\)S
36 23.6 M(        struct list_head name = LIST_HEAD_INIT\(name\))S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.4 Linux linked list implementation)S
474.8 0 M(20)S
GR
SP
%%EndPage
%%Page: 21 23
GS
72 36 T
9/F0 SF 36 687.2 M()S
36 676.4 M(#define INIT_LIST_HEAD\(ptr\) do { \\)S
36 665.6 M(        \(ptr\)->next = \(ptr\); \(ptr\)->prev = \(ptr\); \\)S
36 654.8 M(} while \(0\))S
36 644 M()S
36 633.2 M(#define list_entry\(ptr, type, member\) \\)S
36 622.4 M(        \(\(type *\)\(\(char *\)\(ptr\)-\(unsigned long\)\(&\(\(type *\)0\)->member\)\)\))S
36 611.6 M()S
36 600.8 M(#define list_for_each\(pos, head\) \\)S
36 590 M(        for \(pos = \(head\)->next; pos != \(head\); pos = pos->next\))S
36 581.4 M 415.0 2.0 F
11/F4 SF 0 535.2 M(The first three macros are for initialising an empty list by pointing both next and prev pointers to itself. It is)S
0 522 M(obvious from C syntactical restrictions which ones should be used where - for example,)S
0 508.8 M(LIST_HEAD_INIT\(\) can be used for structure's element initialisation in declaration, the second can be used)S
0 495.6 M(for static variable initialising declarations and the third can be used inside a function.)S
0 469.2 M(The macro list_entry\(\) gives access to individual list element, for example: \(from)S
0 456 M(fs/file_table.c:fs_may_remount_ro\(\)\))S
36 421 M 415.0 2.0 F
9/F0 SF 36 403.6 M(struct super_block {)S
36 392.8 M(   ...)S
36 382 M(   struct list_head s_files;)S
36 371.2 M(   ...)S
36 360.4 M(} *sb = &some_super_block;)S
36 349.6 M()S
36 338.8 M(struct file {)S
36 328 M(   ...)S
36 317.2 M(   struct list_head f_list;)S
36 306.4 M(   ...)S
36 295.6 M(} *file;)S
36 284.8 M()S
36 274 M(struct list_head *p;)S
36 263.2 M()S
36 252.4 M(for \(p = sb->s_files.next; p != &sb->s_files; p = p->next\) {)S
36 241.6 M(     struct file *file = list_entry\(p, struct file, f_list\);)S
36 230.8 M(     do something to 'file')S
36 220 M(})S
36 211.4 M 415.0 2.0 F
11/F4 SF 0 165.2 M(A good example of the use of list_for_each\(\) macro is in the scheduler where we walk the runqueue looking)S
0 152 M(for the process with highest goodness:)S
36 117 M 415.0 2.0 F
9/F0 SF 36 99.6 M(static LIST_HEAD\(runqueue_head\);)S
36 88.8 M(struct list_head *tmp;)S
36 78 M(struct task_struct *p;)S
36 67.2 M()S
36 56.4 M(list_for_each\(tmp, &runqueue_head\) {)S
36 45.6 M(    p = list_entry\(tmp, struct task_struct, run_list\);)S
36 34.8 M(    if \(can_schedule\(p\)\) {)S
36 24 M(        int weight = goodness\(p, this_cpu, prev->active_mm\);)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.4 Linux linked list implementation)S
474.8 0 M(21)S
GR
SP
%%EndPage
%%Page: 22 24
GS
72 36 T
9/F0 SF 36 687.2 M(        if \(weight > c\))S
36 676.4 M(            c = weight, next = p;)S
36 665.6 M(    })S
36 654.8 M(})S
36 646.2 M 415.0 2.0 F
11/F4 SF 0 600 M(Here p->run_list is declared as 'struct list_head run_list' inside task_struct structure and serves as anchor to)S
0 586.8 M(the list. Removing an element from the list and adding \(to head or tail of the list\) is done by)S
0 573.6 M(list_del\(\)/list_add\(\)/list_add_tail\(\) macros. The examples below are adding and removing a task from)S
0 560.4 M(runqueue:)S
36 525.4 M 415.0 2.0 F
9/F0 SF 36 508 M(static inline void del_from_runqueue\(struct task_struct * p\))S
36 497.2 M({)S
36 486.4 M(        nr_running--;)S
36 475.6 M(        list_del\(&p->run_list\);)S
36 464.8 M(        p->run_list.next = NULL;)S
36 454 M(})S
36 443.2 M()S
36 432.4 M(static inline void add_to_runqueue\(struct task_struct * p\))S
36 421.6 M({)S
36 410.8 M(        list_add\(&p->run_list, &runqueue_head\);)S
36 400 M(        nr_running++;)S
36 389.2 M(})S
36 378.4 M()S
36 367.6 M(static inline void move_last_runqueue\(struct task_struct * p\))S
36 356.8 M({)S
36 346 M(        list_del\(&p->run_list\);)S
36 335.2 M(        list_add_tail\(&p->run_list, &runqueue_head\);)S
36 324.4 M(})S
36 313.6 M()S
36 302.8 M(static inline void move_first_runqueue\(struct task_struct * p\))S
36 292 M({)S
36 281.2 M(        list_del\(&p->run_list\);)S
36 270.4 M(        list_add\(&p->run_list, &runqueue_head\);)S
36 259.6 M(})S
36 251 M 415.0 2.0 F
17/F9 SF 0 177.2 M(2.5 Wait Queues)S
11/F4 SF 0 137.6 M(When a process requests the kernel to do something which is currently impossible but that may become)S
0 124.4 M(possible later, the process is put to sleep and is woken up when the request is more likely to be satisfied. One)S
0 111.2 M(of the kernel mechanisms used for this is called a 'wait queue'.)S
0 84.8 M(Linux implementation allows wake-on semantics using TASK_EXCLUSIVE flag. With waitqueues you can)S
0 71.6 M(either use a well-known queue and then simply)S
0 58.4 M(sleep_on/sleep_on_timeout/interruptible_sleep_on/interruptible_sleep_on_timeout or you can define your)S
0 45.2 M(own waitqueue and use add/remove_wait_queue to add and remove yourself from it and also)S
0 32 M(wake_up/wake_up_interruptible to wake up when needed.)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.5 Wait Queues)S
474.8 0 M(22)S
GR
SP
%%EndPage
%%Page: 23 25
GS
72 36 T
11/F4 SF 0 684.8 M(An example of the first usage of waiteueus is interaction between page allocator)S
0 671.6 M(mm/page_alloc.c:__alloc_pages\(\) using the well-known queue kswapd_wait declared in mm/vmscan.c and)S
0 658.4 M(on which kswap kernel daemon is sleeping in mm/vmscan.c:kswap\(\) and is woken up when page allocator)S
0 645.2 M(needs to free up some pages.)S
0 618.8 M(An example of autonomous waitqueue usage is interaction between user process requesting data via read\(2\))S
0 605.6 M(system call and kernel running in the interrupt context to supply the data. An interrupt handler might look)S
0 592.4 M(like \(simplified drivers/char/rtc_interrupt\(\)\):)S
36 557.4 M 415.0 2.0 F
9/F0 SF 36 540 M(static DECLARE_WAIT_QUEUE_HEAD\(rtc_wait\);)S
36 529.2 M()S
36 518.4 M(void rtc_interrupt\(int irq, void *dev_id, struct pt_regs *regs\))S
36 507.6 M({)S
36 496.8 M(        spin_lock\(&rtc_lock\);       )S
36 486 M(        rtc_irq_data = CMOS_READ\(RTC_INTR_FLAGS\);)S
36 475.2 M(        spin_unlock\(&rtc_lock\);     )S
36 464.4 M(        wake_up_interruptible\(&rtc_wait\);)S
36 453.6 M(})S
36 445 M 415.0 2.0 F
11/F4 SF 0 398.8 M(so, the interrupt handler obtains the data by reading from some device-specific io port \(CMOS_READ\(\))S
0 385.6 M(macro turns into a couple outb/inb\) and then wakes up whoever is sleeping on the rtc_wait wait queue.)S
0 359.2 M(Now, the read\(2\) system call could be implemented as:)S
36 324.2 M 415.0 2.0 F
9/F0 SF 36 306.8 M(ssize_t rtc_read\(struct file file, char *buf, size_t count, loff_t *ppos\))S
36 296 M({)S
36 285.2 M(        DECLARE_WAITQUEUE\(wait, current\);)S
36 274.4 M(        unsigned long data;)S
36 263.6 M(        ssize_t retval;)S
36 252.8 M()S
36 242 M(        add_wait_queue\(&rtc_wait, &wait\);)S
36 231.2 M(        current->state = TASK_INTERRUPTIBLE;)S
36 220.4 M(        do {)S
36 209.6 M(                spin_lock_irq\(&rtc_lock\);)S
36 198.8 M(                data = rtc_irq_data;)S
36 188 M(                rtc_irq_data = 0;)S
36 177.2 M(                spin_unlock_irq\(&rtc_lock\);)S
36 166.4 M()S
36 155.6 M(                if \(data != 0\))S
36 144.8 M(                        break;)S
36 134 M()S
36 123.2 M(                if \(file->f_flags & O_NONBLOCK\) {)S
36 112.4 M(                        retval = -EAGAIN;)S
36 101.6 M(                        goto out;)S
36 90.8 M(                })S
36 80 M(                if \(signal_pending\(current\)\) {)S
36 69.2 M(                        retval = -ERESTARTSYS;)S
36 58.4 M(                        goto out;)S
36 47.6 M(                })S
36 36.8 M(                schedule\(\);)S
36 26 M(        } while\(1\);)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.5 Wait Queues)S
474.8 0 M(23)S
GR
SP
%%EndPage
%%Page: 24 26
GS
72 36 T
9/F0 SF 36 687.2 M(        retval = put_user\(data, \(unsigned long *\)buf\);  )S
36 676.4 M(        if \(!retval\))S
36 665.6 M(                retval = sizeof\(unsigned long\);)S
36 654.8 M()S
36 644 M(out:)S
36 633.2 M(        current->state = TASK_RUNNING;)S
36 622.4 M(        remove_wait_queue\(&rtc_wait, &wait\);)S
36 611.6 M(        return retval;)S
36 600.8 M(})S
36 592.2 M 415.0 2.0 F
11/F4 SF 0 546 M(What happens in rtc_read\(\) is this:)S
25 506.4 M(1. )S
(We declare a wait queue element pointing to current process context)S
25 493.2 M(2. )S
(We add this element to the rtc_wait waitqueue)S
25 480 M(3. )S
(We mark current context as TASK_INTERRUPTIBLE which means it will not be rescheduled after)S
36 466.8 M(the next time it sleeps)S
25 453.6 M(4. )S
(We check if there is no data available, if there is we break out, copy data to user buffer, mark)S
36 440.4 M(ourselves as TASK_RUNNING, remove from the wait queue and return)S
25 427.2 M(5. )S
(If there is no data yet we check if user specified non-blocking io and if so we fail with EAGAIN)S
36 414 M(\(which is the same as EWOULDBLOCK\))S
25 400.8 M(6. )S
(We also check if a signal is pending and if so inform the "higher layers" to restart the system call if)S
36 387.6 M(necessary. By "if necessary" I meant the details of signal disposition as specified in sigaction\(2\))S
36 374.4 M(system call)S
25 361.2 M(7. )S
(Then we "switch out", i.e. fall asleep. until woken up by the interrupt handler. If we didn't mark)S
36 348 M(ourselves as TASK_INTERRUPTIBLE then the scheduler could schedule as sooner than when the)S
36 334.8 M(data is available and cause unneeded processing)S
0 308.4 M(It is also worth pointing out that using wait queues it is rather easy to implement poll\(2\) system call:)S
36 273.4 M 415.0 2.0 F
9/F0 SF 36 256 M(static unsigned int rtc_poll\(struct file *file, poll_table *wait\))S
36 245.2 M({)S
36 234.4 M(        unsigned long l;)S
36 223.6 M()S
36 212.8 M(        poll_wait\(file, &rtc_wait, wait\);)S
36 202 M()S
36 191.2 M(        spin_lock_irq\(&rtc_lock\);)S
36 180.4 M(        l = rtc_irq_data;)S
36 169.6 M(        spin_unlock_irq\(&rtc_lock\);)S
36 158.8 M()S
36 148 M(        if \(l != 0\))S
36 137.2 M(                return POLLIN | POLLRDNORM;)S
36 126.4 M(        return 0;)S
36 115.6 M(})S
36 107 M 415.0 2.0 F
11/F4 SF 0 60.8 M(All the work is done by device-independent function poll_wait\(\) which does the necessary waitqueue)S
0 47.6 M(manipulations all we need is to point it to the waitqueue which is woken up by our device-specific interrupt)S
0 34.4 M(handler.)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.5 Wait Queues)S
474.8 0 M(24)S
GR
SP
%%EndPage
%%Page: 25 27
GS
72 36 T
17/F9 SF 0 677.6 M(2.6 Kernel Timers)S
11/F4 SF 0 638 M(Now let us turn our attention to kernel timers. Kernel timers are used to dispatch execution of a particular)S
0 624.8 M(function \(called 'timer handler'\) at a specified time in the future. The main data structure is 'struct timer_list')S
0 611.6 M(declared in include/linux/timer.h:)S
36 576.6 M 415.0 2.0 F
9/F0 SF 36 559.2 M(struct timer_list {)S
36 548.4 M(        struct list_head list;)S
36 537.6 M(        unsigned long expires;)S
36 526.8 M(        unsigned long data;)S
36 516 M(        void \(*function\)\(unsigned long\);)S
36 505.2 M(        volatile int running;)S
36 494.4 M(};)S
36 485.8 M 415.0 2.0 F
11/F4 SF 0 439.6 M(The 'list' field is for linking into the internal list, protected by the timerlist_lock spinlock. The 'expires' field is)S
0 426.4 M(the value of jiffies when the 'function' handler should be invoked with 'data' passed as a parameter. The)S
0 413.2 M('running' field is used on SMP to test if the timer handler is currently running on another cpu.)S
0 386.8 M(The functions add_timer\(\) and del_timer\(\) add and remove a given timer to the list. When a timer expires it is)S
0 373.6 M(removed automatically. Before a timer is used it must be initialised by means of init_timer\(\) function. And)S
0 360.4 M(before it is added, the fields 'function' and 'expires' must be set.)S
17/F9 SF 0 306.4 M(2.7 Bottom Halves)S
11/F4 SF 0 266.8 M(Sometimes it is reasonable to split the amount of work to be performed inside an interrupt handler into)S
0 253.6 M(immediate \(e.g. acknowledging the interrupt, updating the stats etc.\) and that which can be postponed until)S
0 240.4 M(later, when interrupts are enabled \(e.g. to do some postprocessing on data, wake up processes waiting for this)S
0 227.2 M(data etc.\).)S
0 200.8 M(Bottom halves are the oldest mechanism for deferred execution of kernel tasks and have been available since)S
0 187.6 M(Linux 1.x. In Linux2.0 a new mechanism was added called 'task queues' which will be the subject of next)S
0 174.4 M(section.)S
0 148 M(Bottom halves are serialized by a global_bh_lock spinlock, i.e. there can only be one bottom half running on)S
0 134.8 M(any cpu at a time. However, when attempting to execute the handler, if global_bh_lock is not available, the)S
0 121.6 M(bottom half is marked \(i.e. scheduled\) for execution - so processing can continue, as opposed to a busy loop)S
0 108.4 M(on global_bh_lock.)S
0 82 M(There can only be 32 bottom halves registered in total. The functions required to manipulate bottom halves)S
0 68.8 M(are as follows \(all exported to modules\):)S
11/Fc SF 28.2 29.2 M(\267 )S
11/F4 SF (void init_bh\(int nr, void \(*routine\)\(void\)\), installs a bottom half handler pointed to by 'routine')S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.6 Kernel Timers)S
474.8 0 M(25)S
GR
SP
%%EndPage
%%Page: 26 28
GS
72 36 T
11/F4 SF 36 684.8 M(argument into the slot 'nr'. The slot ought to be enumerated in include/linux/interrupt.h in the form)S
36 671.6 M(XXXX_BH, e.g. TIMER_BH or TQUEUE_BH. Typically, subsystem's initialisation routine)S
36 658.4 M(\(init_module\(\) for modules\) installs the required bottom half using this function)S
11/Fc SF 28.2 645.2 M(\267 )S
11/F4 SF (void remove_bh\(int nr\), does the opposite of init_bh\(\), i.e. de-installs bottom half installed at slot)S
36 632 M('nr'. There is no error checking performed there, so, for example remove_bh\(32\) will panic/oops the)S
36 618.8 M(system. Typically, subsystem's cleanup \(cleanup_module\(\) for modules\) uses this function to free up)S
36 605.6 M(the slot that can later be reused by some other subsystem. \(TODO: wouldn't it be nice to have)S
36 592.4 M(/proc/bottom_halves that lists all registered bottom halves on the system? That means global_bh_lock)S
36 579.2 M(must be made read/write, obviously\))S
11/Fc SF 28.2 566 M(\267 )S
11/F4 SF (void mark_bh\(int nr\), mark this bottom half for execution. Typically, an interrupt handler will mark)S
36 552.8 M(its bottom half \(hence the name!\) for execution at a "safer time".)S
0 526.4 M(Bottom halves are globally locked tasklets so the question "when are bottom half handlers executed?" is)S
0 513.2 M(really "when are tasklets executed?". And the answer is - in two places, a\) on each schedule\(\) and b\) on each)S
0 500 M(interrupt/syscall return path in entry.S. \(TODO: therefore, the schedule\(\) case is really boring - it like adding)S
0 486.8 M(yet another very very slow interrupt, why not get rid of handle_softirq label from schedule\(\) altogether?\))S
17/F9 SF 0 419.6 M(2.8 Task Queues)S
11/F4 SF 0 380 M(Task queues can be though of as dynamic extension to old bottom halves. In fact, in the source code they are)S
0 366.8 M(sometimes referred to as "new" bottom halves. More specifically, the old bottom halves discussed in previous)S
0 353.6 M(section have these limitations:)S
25 314 M(1. )S
(There are only a fixed number \(32\) of them)S
25 300.8 M(2. )S
(Each bottom half can only be associated with one handler function)S
25 287.6 M(3. )S
(Bottom halves are consumed with a spinlock held so they cannot block)S
0 261.2 M(So, with task queues, arbitrary number of functions can be chained and processed one after another at a later)S
0 248 M(time. One create a new task queue using DECLARE_TASK_QUEUE\(\) macro and queues a task onto it using)S
0 234.8 M(queue_task\(\) function. The task queue then can be processed using run_task_queue\(\) function. Instead of)S
0 221.6 M(creating your own task queue \(and having to consume it manually\) you can use one of the Linux's predefined)S
0 208.4 M(task queues which are consumed at well-known points:)S
25 168.8 M(1. )S
11/F5 SF (tq_timer)S
11/F4 SF ( - timer task queue, run on each timer interrupt and when releasing tty device \(closing or)S
36 155.6 M(releasing a half-opened terminal device\). Since the timer handler runs in the interrupt context the)S
36 142.4 M(tq_timer tasks also run in interrupt context and thus cannot block)S
25 129.2 M(2. )S
11/F5 SF (tq_scheduler)S
11/F4 SF ( - scheduler task, consumed by the scheduler \(and also when closing tty devices, like)S
36 116 M(tq_timer\). Since the scheduler executed in the context of the process being re-scheduled, the)S
36 102.8 M(tq_scheduler tasks can do anything they like, i.e. block, use process context data \(but why would they)S
36 89.6 M(want to\) etc)S
25 76.4 M(3. )S
11/F5 SF (tq_immediate)S
11/F4 SF ( - is really a bottom half IMMEDIATE_BH, so drivers can queue_task\(task,)S
36 63.2 M(&tq_immediate\) and then mark_bh\(IMMEDIATE_BH\) to be consumed in the interrupt context)S
25 50 M(4. )S
11/F5 SF (tq_disk)S
11/F4 SF ( - used by low level block device access \(and RAID\) to start the actual requests. This task)S
36 36.8 M(queue is exported to modules but shouldn't be used except for special purpose it was designed for)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.8 Task Queues)S
474.8 0 M(26)S
GR
SP
%%EndPage
%%Page: 27 29
GS
72 36 T
11/F4 SF 0 684.8 M(Unless the driver uses its own task queues it does not need to call run_tasks_queues\(\) to process the queue,)S
0 671.6 M(except under circumstances explained below.)S
0 645.2 M(The reason tq_timer/tq_schduler task queues are consumed not only in the usual places but elsewhere)S
0 632 M(\(closing tty device is but one example\) becomes clear if one remembers that the driver can schedule tasks on)S
0 618.8 M(the queue that only makes sense while a particular instance of the device is still valid - which usually means)S
0 605.6 M(until the application closes it. So, the driver may need to call run_task_queue\(\) to flush the tasks it \(and)S
0 592.4 M(anyone else\) has put on the queue, because allowing them to run at a later time may make no sense - i.e. the)S
0 579.2 M(relevant data structures may have been freed/reused by a different instance. This is the reason you see)S
0 566 M(run_task_queue\(\) on tq_timer and tq_scheduler in places other than timer interrup and schedule\(\))S
0 552.8 M(respectively.)S
17/F9 SF 0 498.8 M(2.9 Tasklets)S
11/F4 SF 0 459.2 M(Not yet, will be in future revision.)S
17/F9 SF 0 405.2 M(2.10 Softirqs)S
11/F4 SF 0 365.6 M(Not yet, will be in future revision.)S
17/F9 SF 0 311.6 M(2.11 How System Calls Are Implemented on i386)S
0 291.2 M(Architecture?)S
11/F4 SF 0 251.6 M(There are two mechanisms under Linux for implementing system calls:)S
11/Fc SF 28.2 212 M(\267 )S
11/F4 SF (lcall7/lcall27 call gates)S
11/Fc SF 28.2 198.8 M(\267 )S
11/F4 SF (int 0x80 software interrupt)S
0 172.4 M(Native Linux programs use int 0x80 whilst the binaries from foreign flavours of UNIX \(Solaris, UnixWare 7)S
0 159.2 M(etc.\) use lcall7 mechanism. The name 'lcall7' is historically misleading because it covers also lcall27 \(e.g.)S
0 146 M(Solaris/x86\) but the handler function is called lcall7_func.)S
0 119.6 M(When the system boots the function arch/i386/kernel/traps.c:trap_init\(\) is called which sets up the IDT to)S
0 106.4 M(point vector 0x80 \(of type 15, dpl 3\) to the address of system_call entry from arch/i386/kernel/entry.S.)S
0 80 M(When application makes a system call, the arguments are passed via registers and the application executes 'int)S
0 66.8 M(0x80' instruction. This causes trap into kernel mode and processor jumps to system_call entry point in)S
0 53.6 M(entry.S. What this does is:)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.9 Tasklets)S
474.8 0 M(27)S
GR
SP
%%EndPage
%%Page: 28 30
GS
72 36 T
11/F4 SF 25 684.8 M(1. )S
(Saves registers)S
25 671.6 M(2. )S
(Sets %ds and %es to KERNEL_DS, so that all data \(and extra segment\) references are made in)S
36 658.4 M(kernel address space)S
25 645.2 M(3. )S
(If the value of %eax is greater than NR_syscalls \(currently 256\) then fail with ENOSYS error)S
25 632 M(4. )S
(If the task is being ptraced \(tsk->ptrace & PF_TRACESYS\) do special processing. This is to support)S
36 618.8 M(programs like strace \(analogue of SVR4 truss\(1\)\) or debuggers)S
25 605.6 M(5. )S
(Call sys_call_table+4*\(syscall_number from %eax\). This table is initialised in the same file)S
36 592.4 M(\(arch/i386/kernel/entry.S\) to point to individual system call handlers which under Linux are \(usually\))S
36 579.2 M(prefixed with sys_, e.g. sys_open, sys_exit etc. These C system call handlers will find their)S
36 566 M(arguments on the stack where SAVE_ALL stored them)S
25 552.8 M(6. )S
(Enter 'system call return path'. This is a separate label because it is used not only by int 0x80 but also)S
36 539.6 M(by lcall7, lcall27. This is concerned with handling tasklets \(including bottom halves\), checking if a)S
36 526.4 M(schedule\(\) is needed \(tsk->need_resched != 0\), checking if there are signals pending and if so)S
36 513.2 M(handling them)S
0 486.8 M(Linux supports up to 6 arguments for system calls. They are passed in %ebx, %ecx, %edx, %esi, %edi \(and)S
0 473.6 M(%ebp used temporarily, see _syscall6\(\) in asm-i386/unistd.h\) and the system call number is passed via %eax.)S
17/F9 SF 0 419.6 M(2.12 Atomic Operations)S
11/F4 SF 0 380 M(There are two types of atomic operations - bitmaps and atomic_t. Bitmaps are very convenient for)S
0 366.8 M(maintaining a concept of "allocated" or "free" units from some large collection where each unit is identified)S
0 353.6 M(by some number, for example free inodes or free blocks. They are also widely use for simple locking for)S
0 340.4 M(example to provide exclusive access to open a device, e.g. in arch/i386/kernel/microcode.c:)S
36 305.4 M 415.0 2.0 F
9/F0 SF 36 288 M(/*)S
36 277.2 M( *  Bits in microcode_status. \(31 bits of room for future expansion\))S
36 266.4 M( */)S
36 255.6 M(#define MICROCODE_IS_OPEN       0       /* set if device is in use */)S
36 244.8 M()S
36 234 M(static unsigned long microcode_status;)S
36 225.4 M 415.0 2.0 F
11/F4 SF 0 179.2 M(There is no need to initialise microcode_status to 0 as BSS is zero-cleared under Linux explicitly.)S
36 144.2 M 415.0 2.0 F
9/F0 SF 36 126.8 M(/*)S
36 116 M( * We enforce only one user at a time here with open/close.)S
36 105.2 M( */)S
36 94.4 M(static int microcode_open\(struct inode *inode, struct file *file\))S
36 83.6 M({)S
36 72.8 M(        if \(!capable\(CAP_SYS_RAWIO\)\))S
36 62 M(                return -EPERM;)S
36 51.2 M()S
36 40.4 M(        /* one at a time, please */)S
36 29.6 M(        if \(test_and_set_bit\(MICROCODE_IS_OPEN, &microcode_status\)\))S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.12 Atomic Operations)S
474.8 0 M(28)S
GR
SP
%%EndPage
%%Page: 29 31
GS
72 36 T
9/F0 SF 36 687.2 M(                return -EBUSY;)S
36 676.4 M()S
36 665.6 M(        MOD_INC_USE_COUNT;)S
36 654.8 M(        return 0;)S
36 644 M(})S
36 635.4 M 415.0 2.0 F
11/F4 SF 0 589.2 M(The operations on bitmaps are:)S
11/Fc SF 28.2 549.6 M(\267 )S
11/F5 SF (void set_bit\(int nr, volatilde void *addr\))S
11/F4 SF ( - set bit 'nr' in the bitmap pointed to by 'addr')S
11/Fc SF 28.2 536.4 M(\267 )S
11/F5 SF (void clear_bit\(int nr, volatilde void *addr\))S
11/F4 SF ( - clear bit 'nr' in the bitmap pointed to by 'addr')S
11/Fc SF 28.2 523.2 M(\267 )S
11/F5 SF (void change_bit\(int nr, volatile void *addr\))S
11/F4 SF ( - toggle bit 'nr' \(if set clear, if clear set\) in the bitmap)S
36 510 M(pointed to by 'addr')S
11/Fc SF 28.2 496.8 M(\267 )S
11/F5 SF (int test_and_set_bit\(int nr, volatile void *addr\))S
11/F4 SF ( - atomically set the bit 'nr' and return the old bit)S
36 483.6 M(value)S
11/Fc SF 28.2 470.4 M(\267 )S
11/F5 SF (int test_and_clear_bit\(int nr, volatile void *addr\))S
11/F4 SF ( - atomically clear the bit 'nr' and return the old)S
36 457.2 M(bit value)S
11/Fc SF 28.2 444 M(\267 )S
11/F5 SF (int test_and_change_bit\(int nr, volatile void *addr\))S
11/F4 SF ( - atomically clear the bit 'nr' and return the)S
36 430.8 M(old bit value)S
0 404.4 M(\(TODO: why 'volatile' in the above declarations?\))S
0 378 M(These operations use LOCK_PREFIX which on SMP evaluates to bus lock instruction prefix and to nothing)S
0 364.8 M(on UP. This guarantees atomicity of access in SMP environment.)S
0 338.4 M(Sometimes bit manipulations are not convenient but instead we need to perform arithmetic operations - add,)S
0 325.2 M(subtract, increment decrement. The typical cases are reference counts \(e.g. for inodes\). This facility is)S
0 312 M(provided by the atomic_t data type and the following operations:)S
11/Fc SF 28.2 272.4 M(\267 )S
11/F5 SF (atomic_read\(&v\))S
11/F4 SF ( - read the value of atomic_t variable v)S
11/Fc SF 28.2 259.2 M(\267 )S
11/F5 SF (atomic_set\(&v, i\))S
11/F4 SF ( - set the value of atomic_t variable v to integer i)S
11/Fc SF 28.2 246 M(\267 )S
11/F5 SF (void atomic_add\(int i, volatile atomic_t *v\))S
11/F4 SF ( - add integer 'i' to the value of atomic variable pointed)S
36 232.8 M(to by 'v')S
11/Fc SF 28.2 219.6 M(\267 )S
11/F5 SF (void atomic_sub\(int i, volatile atomic_t *v\))S
11/F4 SF ( - subtract integer 'i' from the value of atomic variable)S
36 206.4 M(pointed to by 'v')S
11/Fc SF 28.2 193.2 M(\267 )S
11/F5 SF (int atomic_sub_and_test\(int i, volatile atomic_t *v\))S
11/F4 SF ( - subtract integer 'i' from the value of atomic)S
36 180 M(variable pointed to by 'v' and returns 1 if the new value is 0 and returns 0 in all other cases)S
11/Fc SF 28.2 166.8 M(\267 )S
11/F5 SF (void atomic_inc\(volatile atomic_t *v\))S
11/F4 SF ( - increment the value by 1)S
11/Fc SF 28.2 153.6 M(\267 )S
11/F5 SF (void atomic_dec\(volatile atomic_t *v\))S
11/F4 SF ( - decrement the value by 1)S
11/Fc SF 28.2 140.4 M(\267 )S
11/F5 SF (int atomic_dec_and_test\(volatile atomic_t *v\))S
11/F4 SF ( - decrement the value and return 1 if the new value)S
36 127.2 M(is 0 and return 0 in all other cases)S
11/Fc SF 28.2 114 M(\267 )S
11/F5 SF (int atomic_inc_and_test\(volatile atomic_t *v\))S
11/F4 SF ( - increment the value and return 1 if the new value)S
36 100.8 M(is 0 and return 0 in all other cases)S
11/Fc SF 28.2 87.6 M(\267 )S
11/F5 SF (int atomic_add_negative\(int i, volatile atomic_t *v\))S
11/F4 SF ( - add the value of 'i' to 'v' and return 1 if the)S
36 74.4 M(result is negative. Return 0 if the result is greater than or equal to 0. This operation is used for)S
36 61.2 M(implementing semaphores)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.12 Atomic Operations)S
474.8 0 M(29)S
GR
SP
%%EndPage
%%Page: 30 32
GS
72 36 T
17/F9 SF 0 677.6 M(2.13 Spinlocks, Read-write Spinlocks and Big-Reader)S
0 657.2 M(Spinlocks)S
11/F4 SF 0 617.6 M(Since the early days of Linux support \(early 90s, this century\), the developers were faced with the classical)S
0 604.4 M(problem of solving the problem of accessing shared data between different types of context \(user process vs)S
0 591.2 M(interrupt\) and different instances of the same context from multiple cpus.)S
0 564.8 M(SMP support was added to Linux 1.3.42 on 15 Nov 1995 \(the original patch was made to 1.3.37 in October)S
0 551.6 M(the same year\).)S
0 525.2 M(If the critical region of code may be executed by either process context and interrupt context, then the way to)S
0 512 M(protect it using cli/sti instructions on UP is:)S
36 477 M 415.0 2.0 F
9/F0 SF 36 459.6 M(unsigned long flags;)S
36 448.8 M()S
36 438 M(save_flags\(flags\);)S
36 427.2 M(cli\(\);)S
36 416.4 M(/* critical code */)S
36 405.6 M(restore_flags\(flags\);)S
36 397 M 415.0 2.0 F
11/F4 SF 0 350.8 M(While this is ok on UP, it obviously is of no use on SMP because the same code sequence may be executed)S
0 337.6 M(simultaneously on another cpu and so cli will provide protection against races with interrupt context on each)S
0 324.4 M(cpu, it will provide no protection against races between contexts running on different cpus. This is where)S
0 311.2 M(spinlocks are useful for.)S
0 284.8 M(There are three types of spinlocks - vanilla \(basic\), read-write and big-reader spinlocks. Read-write)S
0 271.6 M(spinlocks should be used when there is a natural tendency of 'many readers and few writers'. Example of this)S
0 258.4 M(is access to the list of registered filesystems - see fs/super.c. The list is guarded by read-write spinlock)S
0 245.2 M(file_systems_lock because one needs exclusive access only when registering/unregistering a filesystem but)S
0 232 M(any process can read the file /proc/filesystems of use sysfs\(2\) system call to force a read-only scan of the)S
0 218.8 M(file_systems list. This makes it sensible to use read-write spinlocks. With read-write spinlocks, one can have)S
0 205.6 M(multiple readers at a time but only one writer and there can be no readers while there is a writer. Btw, it)S
0 192.4 M(would be nice if new readers would not get a lock while there is a writer trying to get a lock, i.e. if Linux)S
0 179.2 M(could correctly deal with the issue of potential writer starvation by multiple readers. This would mean that)S
0 166 M(readers must be blocked while there is a writer attempting to get the lock. This is not currently the case and it)S
0 152.8 M(is not obvious whether this should be fixed - the argument to the contrary is - readers usually take the lock)S
0 139.6 M(for a very short time so should they really be starved while the writer takes the lock for potentially longer)S
0 126.4 M(periods?)S
0 100 M(Big-reader spinlocks are a form of read-write spinlocks heavily optimised for very light read access with the)S
0 86.8 M(penalty for writes. There is a limited number of big-reader spinlocks - currently only two exist, of which one)S
0 73.6 M(is used only on sparc64 \(global irq\) and the other is used for networking. In all other cases where the access)S
0 60.4 M(pattern does not fit into any of these two scenarios one should use basic spinlocks. You cannot block while)S
0 47.2 M(holding any kind of spinlock.)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.13 Spinlocks, Read-write Spinlocks and Big-Reader Spinlocks)S
474.8 0 M(30)S
GR
SP
%%EndPage
%%Page: 31 33
GS
72 36 T
11/F4 SF 0 684.8 M(Spinlocks come in three flavours: plain, _irq\(\) and _bh\(\).)S
25 645.2 M(1. )S
(Plain spin_lock\(\)/spin_unlock\(\) - if you know the interrupts are always disabled or if you do not race)S
36 632 M(with interrupt context \(e.g. from within interrupt handler\) then you can use this one. It does not touch)S
36 618.8 M(interrupt state on the current cpu)S
25 605.6 M(2. )S
(spin_lock_irq\(\)/spin_unlock_irq\(\) - if you know that interrupts are always enabled then you can use)S
36 592.4 M(this version which simply disables and re-enables interrupts on the current cpu. For example,)S
36 579.2 M(rtc_read\(\) uses spin_lock_irq\(&rtc_lock\) whilst rtc_interrupt\(\) uses spin_lock\(&rtc_lock\) because)S
36 566 M(inside interrupt handler interrupts are always disabled and inside read\(\) method they are always)S
36 552.8 M(enabled rtc_read\(\) uses spin_lock_irq\(\) and not the more generic spin_lock_irqsave\(\) because on)S
36 539.6 M(entry to any system call interrupts are always enabled.)S
25 526.4 M(3. )S
(spin_lock_irqsave\(\)/spin_unlock_irqrestore\(\) - the strongest form, to be used when the interrupt state)S
36 513.2 M(is not known, but only if interrupts matter at all, i.e. there is no point in using it we our interrupt)S
36 500 M(handlers don't execute any critical code)S
0 473.6 M(The reason you cannot use plain spin_lock\(\) if you race against interrupt handlers is because if you take it and)S
0 460.4 M(then interrupt comes in on the same cpu - it will busy wait for the lock forever because the lock holder was)S
0 447.2 M(interrupted and will not continue until the interrupt handler returns.)S
0 420.8 M(The most common usage of a spinlock is to access a data structure shared between user process context and)S
0 407.6 M(interrupt handlers:)S
36 372.6 M 415.0 2.0 F
9/F0 SF 36 355.2 M(spinlock_t my_lock = SPIN_LOCK_UNLOCKED;)S
36 344.4 M()S
36 333.6 M(my_ioctl\(\))S
36 322.8 M({)S
36 312 M(        unsigned long flags;)S
36 301.2 M(        spin_lock_irq\(&my_lock, flags\);)S
36 290.4 M(        /* critical section */)S
36 279.6 M(        spin_unlock_irq\(&my_lock, flags\);)S
36 268.8 M(})S
36 258 M()S
36 247.2 M(my_irq_handler\(\))S
36 236.4 M({)S
36 225.6 M(        spin_lock\(&lock\);)S
36 214.8 M(        /* critical section */)S
36 204 M(        spin_unlock\(&lock\);)S
36 193.2 M(})S
36 184.6 M 415.0 2.0 F
11/F4 SF 0 138.4 M(There are a couple of things to note about this example:)S
25 98.8 M(1. )S
(The process context, represented here as a typical driver method - ioctl\(\) \(arguments and return)S
36 85.6 M(values omitted for clarity\), must use spin_lock_irq\(\) because it knows that interrupts are always)S
36 72.4 M(enabled while executing the device ioctl\(\) method)S
25 59.2 M(2. )S
(Interrupt context, represented here by my_irq_handler\(\) \(again arguments omitted for clarity\) can use)S
36 46 M(plain spin_lock\(\) form because interrupts are disabled inside interrupt handler)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.13 Spinlocks, Read-write Spinlocks and Big-Reader Spinlocks)S
474.8 0 M(31)S
GR
SP
%%EndPage
%%Page: 32 34
GS
72 36 T
17/F9 SF 0 677.6 M(2.14 Semaphores and read/write Semaphores)S
11/F4 SF 0 638 M(Sometimes while accessing a shared data structure one must perform operations that can block, for example)S
0 624.8 M(to copy data to userspace. The locking primitive available for such scenarios under Linux is called a)S
0 611.6 M(semaphore. There are two types of semaphores - basic and read-write semaphores. Depending on the initial)S
0 598.4 M(value of the semaphore, they can be used for eithe mutual exclusion \(initial value of 1\) or to provide more)S
0 585.2 M(sophisticated type of access.)S
0 558.8 M(Read-write semaphores differ from basic semaphores in the same way as read-write spinlocks differ from)S
0 545.6 M(basic spinlocks, i.e. one can have multiple readers at a time but only one writer and there be no readers while)S
0 532.4 M(there are writers - i.e. the writer blocks all readers and new readers block while a writer is waiting.)S
0 506 M(Also, basic semaphores can be interruptible - just use the operations down_interruptible\(\)/up\(\) instead of the)S
0 492.8 M(plain down\(\)/up\(\) and check the value returned from down_interruptible\(\) - if it is non-0 the operation was)S
0 479.6 M(interrupted.)S
0 453.2 M(Using semaphore for mutual exclusion is ideal in situation where critical code section may call by reference)S
0 440 M(unknown functions registered by other subsystems/modules, i.e. the caller cannot know apriori whether the)S
0 426.8 M(function blocks or not.)S
0 400.4 M(A simple example of semaphore usage is in kernel/sys.c, implementation of gethostname\(2\)/sethostname\(2\))S
0 387.2 M(system calls.)S
36 352.2 M 415.0 2.0 F
9/F0 SF 36 334.8 M(asmlinkage long sys_sethostname\(char *name, int len\))S
36 324 M({)S
36 313.2 M(        int errno;)S
36 302.4 M()S
36 291.6 M(        if \(!capable\(CAP_SYS_ADMIN\)\))S
36 280.8 M(                return -EPERM;)S
36 270 M(        if \(len < 0 || len > __NEW_UTS_LEN\))S
36 259.2 M(                return -EINVAL;)S
36 248.4 M(        down_write\(&uts_sem\);)S
36 237.6 M(        errno = -EFAULT;)S
36 226.8 M(        if \(!copy_from_user\(system_utsname.nodename, name, len\)\) {)S
36 216 M(                system_utsname.nodename[len] = 0;)S
36 205.2 M(                errno = 0;)S
36 194.4 M(        })S
36 183.6 M(        up_write\(&uts_sem\);)S
36 172.8 M(        return errno;)S
36 162 M(})S
36 151.2 M()S
36 140.4 M(asmlinkage long sys_gethostname\(char *name, int len\))S
36 129.6 M({)S
36 118.8 M(        int i, errno;)S
36 108 M()S
36 97.2 M(        if \(len < 0\))S
36 86.4 M(                return -EINVAL;)S
36 75.6 M(        down_read\(&uts_sem\);)S
36 64.8 M(        i = 1 + strlen\(system_utsname.nodename\);)S
36 54 M(        if \(i > len\))S
36 43.2 M(                i = len;)S
36 32.4 M(        errno = 0;)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.14 Semaphores and read/write Semaphores)S
474.8 0 M(32)S
GR
SP
%%EndPage
%%Page: 33 35
GS
72 36 T
9/F0 SF 36 687.2 M(        if \(copy_to_user\(name, system_utsname.nodename, i\)\))S
36 676.4 M(                errno = -EFAULT;)S
36 665.6 M(        up_read\(&uts_sem\);)S
36 654.8 M(        return errno;)S
36 644 M(})S
36 635.4 M 415.0 2.0 F
11/F4 SF 0 589.2 M(The points to note about this example are:)S
25 549.6 M(1. )S
(The functions may block while copying data from/to userspace in copy_from_user\(\)/copy_to_user\(\).)S
36 536.4 M(Therefore they could not use any form of spinlock here)S
25 523.2 M(2. )S
(The semaphore type chosen is read-write as opposed to basic because there may be lots of)S
36 510 M(concurrent gethostname\(2\) requests which need not be mutually exclusive.)S
0 483.6 M(Although Linux implementation of semaphores and read-write semaphores is very sophisticated, there are)S
0 470.4 M(possible scenarios one can think of which are not yet implemented, for example there is no concept of)S
0 457.2 M(interruptible read-write semaphores. This is obviously because there are no real-world situations which)S
0 444 M(require these exotic flavours of the primitives.)S
17/F9 SF 0 390 M(2.15 Kernel Support for Loading Modules)S
11/F4 SF 0 350.4 M(Linux is a monolithic operating system and despite all the modern hype about some "advantages" offered by)S
0 337.2 M(operating systems based on micro-kernel design, the truth remains \(quoting Linus Torvalds himself\):)S
11/F0 SF 36 297.6 M(... message passing as the fundamental operation of the OS is)S
36 284.4 M(just an exercise in computer science masturbation. It may)S
36 271.2 M(feel good, but you don't actually get anything DONE.)S
11/F4 SF 0 231.6 M(Therefore, Linux is and will always be based on the monolithic design, which means that all subsystems run)S
0 218.4 M(in the same privileged mode and share the same address space; communication between them is achieved by)S
0 205.2 M(the usual C function call means.)S
0 178.8 M(However, although separating kernel functionality into separate "processes" as is done in micro-kernels is)S
0 165.6 M(definitely a bad idea, separating it into dynamically loadable on demand kernel modules is desirable in some)S
0 152.4 M(circumstances \(e.g. on machines with low memory or for installation kernels which could otherwise contain)S
0 139.2 M(ISA auto-probing device drivers that are mutually exclusive\). The decision whether to include support for)S
0 126 M(loadable modules is made at compilation time and is determined by the CONFIG_MODULES option.)S
0 112.8 M(Support for auto-loading modules via request_module\(\) mechanism is a separate compilation option -)S
0 99.6 M(CONFIG_KMOD.)S
0 73.2 M(The following functionality can be implemented as loadable modules under Linux:)S
25 33.6 M(1. )S
(Character and block device drivers, including misc device drivers)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.15 Kernel Support for Loading Modules)S
474.8 0 M(33)S
GR
SP
%%EndPage
%%Page: 34 36
GS
72 36 T
11/F4 SF 25 684.8 M(2. )S
(Terminal line disciplines)S
25 671.6 M(3. )S
(Virtual \(regular\) files in /proc and in devfs \(e.g. /dev/cpu/microcode vs /dev/misc/microcode\))S
25 658.4 M(4. )S
(Binary file formats \(e.g. ELF, aout etc.\))S
25 645.2 M(5. )S
(Execution domains \(e.g. Linux, UnixWare7, Solaris etc.\))S
25 632 M(6. )S
(Filesystems)S
25 618.8 M(7. )S
(System V IPC)S
0 592.4 M(There a few things that cannot be implemented as modules under Linux \(probably because it makes no sense)S
0 579.2 M(for them to be modularized\):)S
25 539.6 M(1. )S
(Scheduling algorithms)S
25 526.4 M(2. )S
(VM policies)S
25 513.2 M(3. )S
(Buffer cache, page cache and other caches)S
0 486.8 M(Linux provides several system calls to assist in loading modules:)S
25 447.2 M(1. )S
(caddr_t create_module\(const char *name, size_t size\) - allocates 'size' bytes using vmalloc\(\) and)S
36 434 M(maps a module structure at the beginning thereof. This new module is then linked into the list headed)S
36 420.8 M(by module_list. Only a process with CAP_SYS_MODULE can invoke this system call, others will)S
36 407.6 M(get EPERM returned)S
25 394.4 M(2. )S
(long init_module\(const char *name, struct module *image\) - loads the relocated module image and)S
36 381.2 M(causes the module's initialisation routine to be invoked. Only a process with CAP_SYS_MODULE)S
36 368 M(can invoke this system call, others will get EPERM returned)S
25 354.8 M(3. )S
(long delete_module\(const char *name\) - attempts to unload the module. If name == NULL then)S
36 341.6 M(attempt is made to unload all unused modules)S
25 328.4 M(4. )S
(long query_module\(const char *name, int which, void *buf. size_t bufsize, size_t *ret\) - returns)S
36 315.2 M(information about a module \(or about all modules\))S
0 288.8 M(The command interface available to users consists of:)S
11/Fc SF 28.2 249.2 M(\267 )S
11/F4 SF (insmod - insert a single module)S
11/Fc SF 28.2 236 M(\267 )S
11/F4 SF (modprobe - insert a module including all the other modules it depends on)S
11/Fc SF 28.2 222.8 M(\267 )S
11/F4 SF (rmmod - remove a module)S
11/Fc SF 28.2 209.6 M(\267 )S
11/F4 SF (modinfo - print some information about a module, e.g. author, description, parameters the module)S
36 196.4 M(accepts etc)S
0 170 M(Apart from being to load a module manually using either insmod or modprobe it is also possible to have the)S
0 156.8 M(module inserted automatically by the kernel when a particular functionality is required. The kernel interface)S
0 143.6 M(for this is the function called request_module\(name\) which is exported to modules so modules can load other)S
0 130.4 M(modules as well. The request_module\(name\) internally creates a kernel thread which execs the userspace)S
0 117.2 M(command "modprobe -s -k module_name" using the standard exec_usermodehelper\(\) kernel interface)S
0 104 M(\(which is also exported to modules\). The function returns 0 on success, however it is usually not worth)S
0 90.8 M(checking the return code from request_module\(\). Instead, the programming idiom is:)S
36 55.8 M 415.0 2.0 F
9/F0 SF 36 38.4 M(if \(check_some_feature\(\) == NULL\))S
36 27.6 M(    request_module\(module\);)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.15 Kernel Support for Loading Modules)S
474.8 0 M(34)S
GR
SP
%%EndPage
%%Page: 35 37
GS
72 36 T
9/F0 SF 36 687.2 M(if \(check_some_feature\(\) == NULL\))S
36 676.4 M(    return -ENODEV;)S
36 667.8 M 415.0 2.0 F
11/F4 SF 0 621.6 M(For example, this is done by fs/block_dev.c:get_blkfops\(\) to load a module "block-major-N" when attempt)S
0 608.4 M(is made to open a block device on a major N. Obviously, there is no such module called "block-major-N")S
0 595.2 M(\(Linux developers only chose sensible names for their modules\) but it is mapped to a proper module name)S
0 582 M(using the file /etc/modules.conf. However, for most well-known major numbers \(and other kinds of modules\))S
0 568.8 M(the modprobe/insmod commands know which real module to load without needing an explicit alias statement)S
0 555.6 M(in /etc/modules.conf.)S
0 529.2 M(A good example of loading a module is inside the mount\(2\) system call. The mount\(2\) system call accepts)S
0 516 M(the filesystem type as a string which fs/super.c:do_mount\(\) then passes on to fs/super.c:get_fs_type\(\):)S
36 481 M 415.0 2.0 F
9/F0 SF 36 463.6 M(static struct file_system_type *get_fs_type\(const char *name\))S
36 452.8 M({)S
36 442 M(        struct file_system_type *fs;)S
36 431.2 M()S
36 420.4 M(        read_lock\(&file_systems_lock\);)S
36 409.6 M(        fs = *\(find_filesystem\(name\)\);)S
36 398.8 M(        if \(fs && !try_inc_mod_count\(fs->owner\)\))S
36 388 M(                fs = NULL;)S
36 377.2 M(        read_unlock\(&file_systems_lock\);)S
36 366.4 M(        if \(!fs && \(request_module\(name\) == 0\)\) {)S
36 355.6 M(                read_lock\(&file_systems_lock\);)S
36 344.8 M(                fs = *\(find_filesystem\(name\)\);)S
36 334 M(                if \(fs && !try_inc_mod_count\(fs->owner\)\))S
36 323.2 M(                        fs = NULL;)S
36 312.4 M(                read_unlock\(&file_systems_lock\);)S
36 301.6 M(        })S
36 290.8 M(        return fs;)S
36 280 M(})S
36 271.4 M 415.0 2.0 F
11/F4 SF 0 225.2 M(A few things to note in this function:)S
25 185.6 M(1. )S
(First we attempt to find the filesystem with the given name amongst those already registered. This is)S
36 172.4 M(done under protection of file_systems_lock taken for read \(as we are not modifying the list of)S
36 159.2 M(registered filesystems\))S
25 146 M(2. )S
(If such filesystem is found then we attempt to get a new reference to it by trying to increment its)S
36 132.8 M(module's hold count. This always returns 1 for statically linked filesystems or for modules not)S
36 119.6 M(presently being deleted. If try_inc_mod_count\(\) returned 0 then we consider it a failure - i.e. if the)S
36 106.4 M(module is there but being deleted it is as good as if it was not there at all)S
25 93.2 M(3. )S
(We drop the file_systems_lock because what we are about to do next \(request_module\(\)\) is a)S
36 80 M(blocking operation and therefore we can't hold a spinlock over it. Actually, in this specific case, we)S
36 66.8 M(would have to drop file_systems_lock anyway, even if request_module\(\) was guaranteed to be)S
36 53.6 M(non-blocking and the module loading was executed in the same context atomically. The reason for)S
36 40.4 M(this is that module's initialisation will try to call register_filesystem\(\) which will take the same)S
36 27.2 M(file_systems_lock read-write spinlock for write and we will deadlock)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(2.15 Kernel Support for Loading Modules)S
474.8 0 M(35)S
GR
SP
%%EndPage
%%Page: 36 38
GS
72 36 T
11/F4 SF 25 684.8 M(4. )S
(If the attempt to load was successful, then we take the file_systems_lock spinlock and try to locate)S
36 671.6 M(the newly registered filesystem in the list. Note, that this is slightly wrong because it is in principle)S
36 658.4 M(possible for a bug in modprobe command to cause it to coredump after it successfuly loaded the)S
36 645.2 M(requested module, in which case request_module\(\) will fail but the new filesystem will be registered)S
36 632 M(and yet get_fs_type\(\) won't find it)S
25 618.8 M(5. )S
(If the filesystem is found and we are able to get a reference to it we return it. Otherwise we return)S
36 605.6 M(NULL)S
0 579.2 M(When a module is loaded into the kernel it can refer to any symbols that are exported as public by the kernel)S
0 566 M(using EXPORT_SYMBOL\(\) macro or by other currently loaded modules. If the module uses symbols from)S
0 552.8 M(another module it is marked as depending on that module during dependency recalculation, achieved by)S
0 539.6 M(running "depmod -a" command on boot \(e.g. after installing a new kernel\).)S
0 513.2 M(Usually, one must match the set of modules with the version of the kernel interfaces they use, which under)S
0 500 M(Linux simply means the "kernel version" as there is no special kernel interface versioning mechanism in)S
0 486.8 M(general. However, there is a limited functionality called "module versioning" or CONFIG_MODVERSIONS)S
0 473.6 M(which allows to avoid recompiling modules when switching to a new kernel. What happens here is that the)S
0 460.4 M(kernel symbol table is treated differently for internal access and for access from modules. The elements of)S
0 447.2 M(public \(i.e. exported\) part of the symbol table are built by 32bit checksumming the C declaration. So, in order)S
0 434 M(to resolve a symbol used by a module during loading, the loader must match the full representation of the)S
0 420.8 M(symbol that includes the checksum and will refuse to load the module. This only happens when both the)S
0 407.6 M(kernel and the module are compiled with module versioning enabled. If either one of them uses the original)S
0 394.4 M(symbol names then the loader simply tries to match the kernel version declared by the module and the one)S
0 381.2 M(exported by the kernel and refuses to load if they differ.)S
0 359.4 M 487.0 2.0 F
17/F9 SF 0 312 M(3.Virtual Filesystem \(VFS\))S
0 244.8 M(3.1 Inode Caches and Interaction with Dcache)S
11/F4 SF 0 205.2 M(In order to support multiple filesystems Linux contains a special kernel interface level called VFS - Virtual)S
0 192 M(Filesystem Switch. This is similar to vnode/vfs interface found in SVR4 derivatives \(originally it came from)S
0 178.8 M(BSD and Sun original implementations\).)S
0 152.4 M(Linux inode cache is implemented in a single file fs/inode.c which consists of 977 lines of code. It is)S
0 139.2 M(interesting to note that for the last 5-7 years not many changes were made to it, i.e. one can still recognize)S
0 126 M(some of the code comparing the latest version with, say, 1.3.42.)S
0 99.6 M(The structure of Linux inode cache is as follows:)S
25 60 M(1. )S
(A global hashtable inode_hashtable, each inode is hashed by the value of the superblock pointer and)S
36 46.8 M(32bit inode number. Inodes without superblock \(inode->i_sb == NULL\) are added to a doubly)S
36 33.6 M(linked list headed by anon_hash_chain instead. Examples of anonymous inodes are sockets created)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.Virtual Filesystem \(VFS\))S
474.8 0 M(36)S
GR
SP
%%EndPage
%%Page: 37 39
GS
72 36 T
11/F4 SF 36 684.8 M(by net/socket.c:sock_alloc\(\) by calling fs/inode.c:get_empty_inode\(\))S
25 671.6 M(2. )S
(A global type in_use list \(inode_in_use\) which contains valid inodes with i_count>0, i_nlink>0.)S
36 658.4 M(Inodes newly allocated by get_empty_inode\(\) and get_new_inode\(\) are added to inode_in_use list)S
25 645.2 M(3. )S
(A global type unused list \(inode_unused\) which contains valid inodes with i_count = 0)S
25 632 M(4. )S
(A per-superblock type dirty list \(sb->s_dirty\) which contains valid inodes with i_count>0, i_nlink>0)S
36 618.8 M(and i_state & I_DIRTY. When inode is marked dirty it is added to the sb->s_dirty list if it is also)S
36 605.6 M(hashed. Maintaining a per-superblock dirty list of inodes allows to quickly sync inodes)S
25 592.4 M(5. )S
(Inode cache proper - a SLAB cache called inode_cachep. As inode objects are allocated and freed,)S
36 579.2 M(they are taken from and returned to this SLAB cache)S
0 552.8 M(The type lists are anchored from inode->i_list, the hashtable from inode->i_hash. Each inode can be on a)S
0 539.6 M(hashtable and one and only one type \(in_use, unused or dirty\) list.)S
0 513.2 M(All these lists are protected by a single spinlock - inode_lock.)S
0 486.8 M(Inode cache subsystem is initialised when inode_init\(\) function is called init/main.c:start_kernel\(\). The)S
0 473.6 M(function is marked as __init which means its code is thrown away later on. It is passed a single argument -)S
0 460.4 M(the number of physical pages on the system. This is so that inode cache can configure itself depending on)S
0 447.2 M(how much memory is available, i.e. create a larger hashtable if there is enough memory.)S
0 420.8 M(The only stats information about inode cache is the number of unused inodes, stored in inodes_stat.nr_unused)S
0 407.6 M(and accessible to user programs via files /proc/sys/fs/inode-nr and /proc/sys/fs/inode-state.)S
0 381.2 M(We can examine one of the lists from the gdb running on a live kernel thus:)S
36 346.2 M 415.0 2.0 F
9/F0 SF 36 328.8 M(\(gdb\) printf "%d\\n", \(unsigned long\)\(&\(\(struct inode *\)0\)->i_list\))S
36 318 M(8)S
36 307.2 M(\(gdb\) p inode_unused)S
36 296.4 M($34 = 0xdfa992a8)S
36 285.6 M(\(gdb\) p \(struct list_head\)inode_unused)S
36 274.8 M($35 = {next = 0xdfa992a8, prev = 0xdfcdd5a8})S
36 264 M(\(gdb\) p \(\(struct list_head\)inode_unused\).prev)S
36 253.2 M($36 = \(struct list_head *\) 0xdfcdd5a8)S
36 242.4 M(\(gdb\) p \(\(\(struct list_head\)inode_unused\).prev\)->prev)S
36 231.6 M($37 = \(struct list_head *\) 0xdfb5a2e8)S
36 220.8 M(\(gdb\) set $i = \(struct inode *\)0xdfb5a2e0)S
36 210 M(\(gdb\) p $i->i_ino)S
36 199.2 M($38 = 0x3bec7)S
36 188.4 M(\(gdb\) p $i->i_count)S
36 177.6 M($39 = {counter = 0x0})S
36 169 M 415.0 2.0 F
11/F4 SF 0 122.8 M(Note that we deducted 8 from the address 0xdfb5a2e8 to obtain the address of the 'struct inode' 0xdfb5a2e0)S
0 109.6 M(according to the definition of list_entry\(\) macro from include/linux/list.h.)S
0 83.2 M(To understand how inode cache works let us trace a lifetime of an inode of a regular file on ext2 filesystem as)S
0 70 M(it is opened and closed:)S
36 35 M 415.0 2.0 F
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.Virtual Filesystem \(VFS\))S
474.8 0 M(37)S
GR
SP
%%EndPage
%%Page: 38 40
GS
72 36 T
9/F0 SF 36 687.2 M(fd = open\("file", O_RDONLY\);)S
36 676.4 M(close\(fd\);)S
36 667.8 M 415.0 2.0 F
11/F4 SF 0 621.6 M(The open\(2\) system call is implemented in fs/open.c:sys_open function and the real work is done by)S
0 608.4 M(fs/open.c:filp_open\(\) function which is split into two parts:)S
25 568.8 M(1. )S
(open_namei\(\) - fills in nameidata structure containing the dentry and vfsmount structures)S
25 555.6 M(2. )S
(dentry_open\(\) - given a dentry and vfsmount it allocates a new 'struct file' and links them together,)S
36 542.4 M(as well as invoking filesystem specific f_op->open\(\) method which was set in inode->i_fop when)S
36 529.2 M(inode was read in open_namei\(\) \(which provided inode via dentry->d_inode\).)S
0 502.8 M(The open_namei\(\) function interacts with dentry cache via path_walk\(\) which in turn calls real_lookup\(\))S
0 489.6 M(which invokes inode_operations->lookup\(\) method which is filesystem-specific and its job is to find the)S
0 476.4 M(entry in the parent directory with the matching name and then do iget\(sb, ino\) to get the corresponding inode)S
0 463.2 M(which brings us to the inode cache. When the inode is read in, the dentry is instantiated by means of)S
0 450 M(d_add\(dentry, inode\). While we are at it, note that for UNIX-style filesystems which have the concept of)S
0 436.8 M(on-disk inode number, it is the lookup method's job to map its endianness to current cpu format, e.g. if the)S
0 423.6 M(inode number in raw \(fs-specific\) dir entry is in little-endian 32 bit format one could do:)S
36 388.6 M 415.0 2.0 F
9/F0 SF 36 371.2 M(unsigned long ino = le32_to_cpu\(de->inode\);)S
36 360.4 M(inode = iget\(sb, ino\);)S
36 349.6 M(d_add\(dentry, inode\);)S
36 341 M 415.0 2.0 F
11/F4 SF 0 294.8 M(So, when we open a file we hit iget\(sb, ino\) which is really iget4\(sb, ino, NULL, NULL\) which does:)S
25 255.2 M(1. )S
(Attempts to find an inode with matching superblock and inode number in the hashtable under)S
36 242 M(protection of inode_lock. If inode is found then it's reference count \(i_count\) is incremented and if)S
36 228.8 M(and if it was 0 and inode is not dirty then inode is removed from whatever type list \(inode->i_list\) it)S
36 215.6 M(is currently on \(it has to be inode_unused list, of course\) and inserted into inode_in_use type list and)S
36 202.4 M(inodes_stat.nr_unused is decremented)S
25 189.2 M(2. )S
(If inode is currently locked we wait until it is not locked so that iget4\(\) is guaranteed to return not)S
36 176 M(locked inode)S
25 162.8 M(3. )S
(If inode was not found in the hashtable then it is the first time we encounter this inode so we call)S
36 149.6 M(get_new_inode\(\) passing it the pointer to the place in the hashtable where it should be inserted to)S
25 136.4 M(4. )S
(get_new_inode\(\) allocates a new inode from the inode_cachep SLAB cache but this operation can)S
36 123.2 M(block \(GFP_KERNEL allocation\) so it must drop the inode_lock spinlock which guards the)S
36 110 M(hashtable. Since it dropped the spinlock it must retry searching the inode in the hashtable and if it is)S
36 96.8 M(found this time, it returns \(after incrementing the reference by __iget\) the one found in the hashtable)S
36 83.6 M(and destroys the newly allocated one. If it is still not found in the hashtable then the new inode we)S
36 70.4 M(have just allocated is the one to be used and so it is initialised to the required values and the)S
36 57.2 M(fs-specific sb->s_op->read_inode\(\) method is invoked to populate the rest of the inode. This brings)S
36 44 M(us from inode cache back to the filesystem code - remember that we came to the inode cache when)S
36 30.8 M(filesystem-specific lookup\(\) method invoked iget\(\). While the s_op->read_inode\(\) method is)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.Virtual Filesystem \(VFS\))S
474.8 0 M(38)S
GR
SP
%%EndPage
%%Page: 39 41
GS
72 36 T
11/F4 SF 36 684.8 M(reading the inode from disk the inode is locked \(i_state = I_LOCK\) and after it returns it is unlocked)S
36 671.6 M(and all the waiters for it are woken up)S
0 645.2 M(Now, let's see what happens when we close this file descriptor. The close\(2\) system call is implemented in)S
0 632 M(fs/open.c:sys_close\(\) function which calls do_close\(fd, 1\) which rips \(replaces with NULL\) the descriptor of)S
0 618.8 M(the process' file descriptor table and invokes filp_close\(\) function which does most of the work. The)S
0 605.6 M(interesting things happen in fput\(\) which checks if this was the last reference to the file and if so calls)S
0 592.4 M(fs/file_table.c:_fput\(\) which calls __fput\(\) which is where interaction with dcache \(and therefore with inode)S
0 579.2 M(cache - remember dcache is a Master of inode cache!\) happens. The fs/dcache.c:dput\(\) does dentry_iput\(\))S
0 566 M(which brings us back to inode cache via iput\(inode\) so let us understand fs/inode.c:iput\(inode\):)S
25 526.4 M(1. )S
(if parameter passed to us is NULL, we do absolutely nothing and return)S
25 513.2 M(2. )S
(if there is a fs-specific sb->s_op->put_inode\(\) method it is invoked now with no spinlocks held \(so)S
36 500 M(it can block\))S
25 486.8 M(3. )S
(inode_lock spinlock is taken and i_count is decremented. If this was NOT the last reference to this)S
36 473.6 M(inode then we simply checked if there are too many references to it and so i_count can wrap around)S
36 460.4 M(the 32 bits allocated to it and if so we print a warning and return. Note that we call printk\(\) while)S
36 447.2 M(holding the inode_lock spinlock - this is fine because printk\(\) can never block so it may be called in)S
36 434 M(absolutely any context \(even from interrupt handlers!\))S
25 420.8 M(4. )S
(if this was the last active reference then some work needs to be done.)S
0 394.4 M(The work performed by iput\(\) on the last inode reference is rather complex so we separate it into a list of its)S
0 381.2 M(own:)S
25 341.6 M(1. )S
(If i_nlink == 0 \(e.g. the file was unlinked while we held it open\) then inode is removed from)S
36 328.4 M(hashtable and from its type list and if there are any data pages held in page cache for this inode, they)S
36 315.2 M(are removed by means of truncate_all_inode_pages\(&inode->i_data\). Then filesystem-specific)S
36 302 M(s_op->delete_inode\(\) method is invoked which typically deletes on-disk copy of the inode. If there)S
36 288.8 M(is no s_op->delete_inode\(\) method registered by the filesystem \(e.g. ramfs\) then we call)S
36 275.6 M(clear_inode\(inode\) which invokes s_op->clear_inode\(\) if registered and if inode corresponds to a)S
36 262.4 M(block device the device's reference count is dropped by bdput\(inode->i_bdev\).)S
25 249.2 M(2. )S
(if i_nlink != 0 then we check if there are other inodes in the same hash bucket and if there is none,)S
36 236 M(then if inode is not dirty we delete it from its type list and add it to inode_unused list incrementing)S
36 222.8 M(inodes_stat.nr_unused. If there are inodes in the same hashbucket then we delete it from the type list)S
36 209.6 M(and add to inode_unused list. If this was anonymous inode \(NetApp .snapshot\) then we delete it from)S
36 196.4 M(the type list and clear/destroy it completely)S
17/F9 SF 0 129.2 M(3.2 Filesystem Registration/Unregistration)S
11/F4 SF 0 89.6 M(Linux kernel provides a mechanism for new filesystems to be written with minimum effort. The historical)S
0 76.4 M(reasons for this are:)S
25 36.8 M(1. )S
(In the world where people still use non-Linux operating systems to protect their investment in legacy)S
36 23.6 M(software Linux had to provide interoperability by supporting a great multitude of different)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.2 Filesystem Registration/Unregistration)S
474.8 0 M(39)S
GR
SP
%%EndPage
%%Page: 40 42
GS
72 36 T
11/F4 SF 36 684.8 M(filesystems - most of which would not deserve to exist on their own but only for compatibility with)S
36 671.6 M(existing non-Linux operating systems)S
25 658.4 M(2. )S
(The interface for filesystem writers had to be very simple so that people could try to reverse engineer)S
36 645.2 M(existing proprietary filesystems by writing read-only versions of them. Therefore Linux VFS makes)S
36 632 M(it very easy to implement read-only filesystems - 95% of the work is to finish them by adding full)S
36 618.8 M(write-support. As a concrete example, I wrote read-only BFS filesystem for Linux in about 10 hours)S
36 605.6 M(but it took several weeks to complete it to have full write support \(and even today some purists claim)S
36 592.4 M(that it is not complete because "it doesn't have compactification support"\))S
25 579.2 M(3. )S
(All Linux filesystems can be implemented as modules so VFS interface is exported)S
0 552.8 M(Let us consider the steps required to implement a filesystem under Linux. The code implementing a)S
0 539.6 M(filesystem can be either a dynamically loadable module or statically linked into the kernel and the way it is)S
0 526.4 M(done under Linux is very transparent. All that is needed is to fill in a 'struct file_system_type' structure and)S
0 513.2 M(register it with the VFS using register_filesystem\(\) function as in the following example from fs/bfs/inode.c:)S
36 478.2 M 415.0 2.0 F
9/F0 SF 36 460.8 M(#include <linux/module.h>)S
36 450 M(#include <linux/init.h>)S
36 439.2 M()S
36 428.4 M(static struct super_block *bfs_read_super\(struct super_block *, void *, int\);)S
36 417.6 M()S
36 406.8 M(static DECLARE_FSTYPE_DEV\(bfs_fs_type, "bfs", bfs_read_super\);)S
36 396 M()S
36 385.2 M(static int __init init_bfs_fs\(void\))S
36 374.4 M({)S
36 363.6 M(        return register_filesystem\(&bfs_fs_type\);)S
36 352.8 M(})S
36 342 M()S
36 331.2 M(static void __exit exit_bfs_fs\(void\))S
36 320.4 M({)S
36 309.6 M(        unregister_filesystem\(&bfs_fs_type\);)S
36 298.8 M(})S
36 288 M()S
36 277.2 M(module_init\(init_bfs_fs\))S
36 266.4 M(module_exit\(exit_bfs_fs\))S
36 257.8 M 415.0 2.0 F
11/F4 SF 0 211.6 M(These macros ensure that for modules the functions init_bfs_fs\(\) and exit_bfs_fs\(\) turn into init_module\(\) and)S
0 198.4 M(cleanup_module\(\) respectively and for statically linked objects the exit_bfs_fs\(\) code vanishes as it is)S
0 185.2 M(unnecessary.)S
0 158.8 M(The 'struct file_system_type' is declared in include/linux/fs.h:)S
36 123.8 M 415.0 2.0 F
9/F0 SF 36 106.4 M(struct file_system_type {)S
36 95.6 M(        const char *name;)S
36 84.8 M(        int fs_flags;)S
36 74 M(        struct super_block *\(*read_super\) \(struct super_block *, void *, int\);)S
36 63.2 M(        struct module *owner;)S
36 52.4 M(        struct vfsmount *kern_mnt; /* For kernel mount, if it's FS_SINGLE fs */)S
36 41.6 M(        struct file_system_type * next;)S
36 30.8 M(};)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.2 Filesystem Registration/Unregistration)S
474.8 0 M(40)S
GR
SP
%%EndPage
%%Page: 41 43
GS
72 36 T
36 689.4 M 415.0 2.0 F
11/F4 SF 0 643.2 M(The fields thereof are explained thus:)S
11/Fc SF 28.2 603.6 M(\267 )S
11/F5 SF (name)S
11/F4 SF ( - human readable name, appears in /proc/filesystems file and is used as a key to find)S
36 590.4 M(filesystem by name \(type of mount\(2\)\) and to refuse to register a different filesystem under the name)S
36 577.2 M(of the one already registered - so there can \(obviously\) be only one filesystem with a given name.)S
36 564 M(For modules, name points to module's address spaces and not copied - this means cat)S
36 550.8 M(/proc/filesystems can oops if the module was unloaded but filesystem is still registered)S
11/Fc SF 28.2 537.6 M(\267 )S
11/F5 SF (fs_flags)S
11/F4 SF ( - one or more \(ORed\) of the flags: FS_REQUIRES_DEV for filesystems that can only be)S
36 524.4 M(mounted on a block device, FS_SINGLE for filesystems that can have only one superblock,)S
36 511.2 M(FS_NOMOUNT for filesystems that cannot be mounted from userspace by means of mount\(2\))S
36 498 M(system call - they can however be mounted internally using kern_mount\(\) interface, e.g. pipefs)S
11/Fc SF 28.2 484.8 M(\267 )S
11/F5 SF (read_super)S
11/F4 SF ( - a pointer to the function that reads the super block during mount operation. This)S
36 471.6 M(function is required - if it is not provided, mount operation \(whether from userspace or inkernel\) will)S
36 458.4 M(always fail except in FS_SINGLE case where it will Oops in get_sb_single\(\) trying to dereference a)S
36 445.2 M(NULL pointer in fs_type->kern_mnt->mnt_sb with \(fs_type->kern_mnt = NULL\))S
11/Fc SF 28.2 432 M(\267 )S
11/F5 SF (owner)S
11/F4 SF ( - pointer to the module that implements this filesystem. If the filesystem is statically linked)S
36 418.8 M(into the kernel then this is NULL. You don't need to set this manually as the macro THIS_MODULE)S
36 405.6 M(does the right thing automatically)S
11/Fc SF 28.2 392.4 M(\267 )S
11/F5 SF (kern_mnt)S
11/F4 SF ( - for FS_SINGLE filesystems only. This is set by kern_mount\(\). \(TODO: kern_mount\(\))S
36 379.2 M(should refuse to mount filesystems if FS_SINGLE isnot set\))S
11/Fc SF 28.2 366 M(\267 )S
11/F5 SF (next)S
11/F4 SF ( - linkage into singly-linked list headed by file_systems \(see fs/super.c\). The list is protected by)S
36 352.8 M(the file_systems_lock read-write spinlock and functions register/unregister_filesystem\(\) modify it by)S
36 339.6 M(linking and unlinking the entry from the list)S
0 313.2 M(The job of read_super function is to fill in the fields of the superblock, allocate root inode and initialise any)S
0 300 M(fs-private information associated with this mounted instance of the filesystem. So, typically the read_super\(\))S
0 286.8 M(would do:)S
25 247.2 M(1. )S
(Read the superblock from the device specified via sb->s_dev argument using buffer cache bread\(\))S
36 234 M(function. If it anticipates to read a few more subsequent metadata blocks immediately then it makes)S
36 220.8 M(sense to use breada\(\) to schedule reading extra blocks asynchronously)S
25 207.6 M(2. )S
(Verify that superblock contains the valid magic number and overall "looks" sane)S
25 194.4 M(3. )S
(Initialise sb->s_op to point to 'struct super_block_operations' structure. This structure contains)S
36 181.2 M(filesystem-specific functions implementing operations like "read inode", "delete inode" etc)S
25 168 M(4. )S
(Allocate root inode and root dentry using d_alloc_root\(\))S
25 154.8 M(5. )S
(If the filesystem is not mounted read-only then set sb->s_dirt = 1 and mark the buffer containing)S
36 141.6 M(superblock dirty \(TODO: why do we do this? I did it in BFS because MINIX did it...\))S
17/F9 SF 0 87.6 M(3.3 File Descriptor Management)S
11/F4 SF 0 48 M(Under Linux there are several levels of indirection between user file descriptor and the kernel inode structure.)S
0 34.8 M(When a process makes open\(2\) system call, the kernel returns a small non-negative integer which can be)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.3 File Descriptor Management)S
474.8 0 M(41)S
GR
SP
%%EndPage
%%Page: 42 44
GS
72 36 T
11/F4 SF 0 684.8 M(used for subsequent io operations on this file. This integer is an index into an array of pointers to 'struct file'.)S
0 671.6 M(Each file structure points to a dentry via file->f_dentry. And each dentry points to an inode via)S
0 658.4 M(dentry->d_inode.)S
0 632 M(Each task contains a field tsk->files which is a pointer to 'struct files_struct' defined in include/linux/sched.h:)S
36 597 M 415.0 2.0 F
9/F0 SF 36 579.6 M(/*)S
36 568.8 M( * Open file table structure)S
36 558 M( */)S
36 547.2 M(struct files_struct {)S
36 536.4 M(        atomic_t count;)S
36 525.6 M(        rwlock_t file_lock;)S
36 514.8 M(        int max_fds;)S
36 504 M(        int max_fdset;)S
36 493.2 M(        int next_fd;)S
36 482.4 M(        struct file ** fd;      /* current fd array */)S
36 471.6 M(        fd_set *close_on_exec;)S
36 460.8 M(        fd_set *open_fds;)S
36 450 M(        fd_set close_on_exec_init;)S
36 439.2 M(        fd_set open_fds_init;)S
36 428.4 M(        struct file * fd_array[NR_OPEN_DEFAULT];)S
36 417.6 M(};)S
36 409 M 415.0 2.0 F
11/F4 SF 0 362.8 M(The file->count is a reference count, incremented by get_file\(\) \(usually called by fget\(\)\) and decremented by)S
0 349.6 M(fput\(\) and by put_filp\(\). The difference between fput\(\) and put_filp\(\) is that fput\(\) does more work usually)S
0 336.4 M(needed for regular files, such as releasing flock locks, releasing dentry etc while put_filp\(\) is only)S
0 323.2 M(manipulating file table structures, i.e. decrements the count, removes the file from the anon_list and adds it to)S
0 310 M(the free_list, under protection of files_lock spinlock.)S
0 283.6 M(The tsk->files can be shared between parent and child if the child thread was created using clone\(\) system)S
0 270.4 M(call with CLONE_FILES set in the clone flags argument. This can be seen in kernel/fork.c:copy_files\(\))S
0 257.2 M(\(called by do_fork\(\)\) which only increments the file->count if CLONE_FILES is set instead of the usual)S
0 244 M(copying file descriptor table in time-honoured tradition of classical UNIX fork\(2\).)S
0 217.6 M(When a file is opened the file structure allocated for it is installed into current->files->fd[fd] slot and a 'fd')S
0 204.4 M(bit is set in the bitmap current->files->open_fds. All this is done under the write protection of)S
0 191.2 M(current->files->file_lock read-write spinlock. When the descriptor is closed a 'fd' bit is cleared in)S
0 178 M(current->files->open_fds and current->files->next_fd is set equal to 'fd' as a hint for finding the first unused)S
0 164.8 M(descriptor next time this process wants to open a file.)S
17/F9 SF 0 110.8 M(3.4 File Structure Management)S
11/F4 SF 0 71.2 M(The file structure is declared in include/linux/fs.h:)S
36 36.2 M 415.0 2.0 F
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.4 File Structure Management)S
474.8 0 M(42)S
GR
SP
%%EndPage
%%Page: 43 45
GS
72 36 T
9/F0 SF 36 687.2 M(struct fown_struct {)S
36 676.4 M(        int pid;                /* pid or -pgrp where SIGIO should be sent */)S
36 665.6 M(        uid_t uid, euid;        /* uid/euid of process setting the owner */)S
36 654.8 M(        int signum;             /* posix.1b rt signal to be delivered on IO */)S
36 644 M(};)S
36 633.2 M()S
36 622.4 M(struct file {)S
36 611.6 M(        struct list_head        f_list;)S
36 600.8 M(        struct dentry           *f_dentry;)S
36 590 M(        struct vfsmount         *f_vfsmnt;)S
36 579.2 M(        struct file_operations  *f_op;)S
36 568.4 M(        atomic_t                f_count;)S
36 557.6 M(        unsigned int            f_flags;)S
36 546.8 M(        mode_t                  f_mode;)S
36 536 M(        loff_t                  f_pos;)S
36 525.2 M(        unsigned long           f_reada, f_ramax, f_raend, f_ralen, f_rawin;)S
36 514.4 M(        struct fown_struct      f_owner;)S
36 503.6 M(        unsigned int            f_uid, f_gid;)S
36 492.8 M(        int                     f_error;)S
36 482 M()S
36 471.2 M(        unsigned long           f_version;)S
36 460.4 M(  )S
36 449.6 M(        /* needed for tty driver, and maybe others */)S
36 438.8 M(        void                    *private_data; )S
36 428 M(};)S
36 419.4 M 415.0 2.0 F
11/F4 SF 0 373.2 M(Let us look at the various fields of 'struct file':)S
25 333.6 M(1. )S
11/F5 SF (f_list)S
11/F4 SF ( - this field links file structure on one \(and only one\) of the lists: a\) sb->s_files list of all open)S
36 320.4 M(files on this filesystem, if the corresponding inode is not anonymous, then dentry_open\(\) \(called by)S
36 307.2 M(filp_open\(\) links the file into this list; b\) fs/file_table.c:free_list containing unused file structures; c\))S
36 294 M(fs/file_table.c:anon_list, when a new file structure is created by get_empty_filp\(\) it is placed on this)S
36 280.8 M(list. All these lists are protected by files_lock spinlock)S
25 267.6 M(2. )S
11/F5 SF (f_dentry)S
11/F4 SF ( - the dentry corresponding to this file. The dentry is created at nameidata lookup time by)S
36 254.4 M(open_namei\(\) \(or rather path_walk\(\) which it calls\) but the actual file->f_dentry field is set by)S
36 241.2 M(dentry_open\(\) to contain the dentry thus found)S
25 228 M(3. )S
11/F5 SF (f_vfsmnt)S
11/F4 SF ( - the pointer to vfsmount structure of the filesystem containing the file. This is set by)S
36 214.8 M(dentry_open\(\) but is found as part of nameidata lookup by open_namei\(\) \(or rather path_init\(\) which)S
36 201.6 M(it calls\))S
25 188.4 M(4. )S
11/F5 SF (f_op)S
11/F4 SF ( - the pointer to file_operations which contains various methods that can be invoked on the file.)S
36 175.2 M(This is copied from inode->i_fop which is placed there by filesystem-specific s_op->read_inode\(\))S
36 162 M(method during nameidata lookup. We will look at file_operations methods in detail later on in this)S
36 148.8 M(section)S
25 135.6 M(5. )S
11/F5 SF (f_count)S
11/F4 SF ( - reference count manipulated by get_file/put_filp/fput)S
25 122.4 M(6. )S
11/F5 SF (f_flags)S
11/F4 SF ( - O_XXX flags from open\(2\) system call copied there \(with slight modifications by)S
36 109.2 M(filp_open\) by dentry_open and after clearing O_CREAT, O_EXCL, O_NOCTTY, O_TRUNC -)S
36 96 M(there is no point in storing these flags permanently since they cannot be modified by F_SETFL \(or)S
36 82.8 M(queried by F_GETFL\) fcntl\(2\) calls)S
25 69.6 M(7. )S
11/F5 SF (f_mode)S
11/F4 SF ( - a combination of userspace flags and mode, set by dentry_open\(\). The point of the)S
36 56.4 M(conversion is to store read and write access in separate bits so one could do easy checks like \(f_mode)S
36 43.2 M(& FMODE_WRITE\) and \(f_mode & FMODE_READ\))S
25 30 M(8. )S
11/F5 SF (f_pos)S
11/F4 SF ( - a current file position for next read or write to the file. Under i386 it is of type long long, i.e.)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.4 File Structure Management)S
474.8 0 M(43)S
GR
SP
%%EndPage
%%Page: 44 46
GS
72 36 T
11/F4 SF 36 684.8 M(a 64bit value)S
25 671.6 M(9. )S
11/F5 SF (f_reada, f_ramax, f_raend, f_ralen, f_rawin)S
11/F4 SF ( - to support readahead - too complex to be discussed)S
36 658.4 M(by mortals ;\))S
19.5 645.2 M(10. )S
11/F5 SF (f_owner)S
11/F4 SF ( - owner of file io to receive asynchronous io notifications via SIGIO mechanism \(see)S
36 632 M(fs/fcntl.c:kill_fasync\(\)\))S
19.5 618.8 M(11. )S
11/F5 SF (f_uid, f_gid)S
11/F4 SF ( - set to user id and group id of the process that opened the file, when the file structure is)S
36 605.6 M(created in get_empty_filp\(\). If the file is a socket, used by ipv4 netfilter)S
19.5 592.4 M(12. )S
11/F5 SF (f_error)S
11/F4 SF ( - used by NFS client to return write errors. It is set in fs/nfs/file.c and checked in)S
36 579.2 M(mm/filemap.c:generic_file_write\(\))S
19.5 566 M(13. )S
11/F5 SF (f_version)S
11/F4 SF ( - versioning mechanism for invalidating caches, incremented \(using global 'event'\))S
36 552.8 M(whenever f_pos changes)S
19.5 539.6 M(14. )S
11/F5 SF (private_data)S
11/F4 SF ( - private per-file data which can be used by filesystems \(e.g. coda stores credentials)S
36 526.4 M(here\) or by device drivers. Device drivers \(in the presence of devfs\) could use this field to)S
36 513.2 M(differentiate between multiple instances instead of the classical minor number encoded in)S
36 500 M(file->f_dentry->d_inode->i_rdev)S
0 473.6 M(Now let us look at file_operations structure which contains the methods that can be invoked on files. Let us)S
0 460.4 M(recall that it is copied from inode->i_fop where it is set by s_op->read_inode\(\) method. It is declared in)S
0 447.2 M(include/linux/fs.h:)S
36 412.2 M 415.0 2.0 F
9/F0 SF 36 394.8 M(struct file_operations {)S
36 384 M(        struct module *owner;)S
36 373.2 M(        loff_t \(*llseek\) \(struct file *, loff_t, int\);)S
36 362.4 M(        ssize_t \(*read\) \(struct file *, char *, size_t, loff_t *\);)S
36 351.6 M(        ssize_t \(*write\) \(struct file *, const char *, size_t, loff_t *\);)S
36 340.8 M(        int \(*readdir\) \(struct file *, void *, filldir_t\);)S
36 330 M(        unsigned int \(*poll\) \(struct file *, struct poll_table_struct *\);)S
36 319.2 M(        int \(*ioctl\) \(struct inode *, struct file *, unsigned int, unsigned long\);)S
36 308.4 M(        int \(*mmap\) \(struct file *, struct vm_area_struct *\);)S
36 297.6 M(        int \(*open\) \(struct inode *, struct file *\);)S
36 286.8 M(        int \(*flush\) \(struct file *\);)S
36 276 M(        int \(*release\) \(struct inode *, struct file *\);)S
36 265.2 M(        int \(*fsync\) \(struct file *, struct dentry *, int datasync\);)S
36 254.4 M(        int \(*fasync\) \(int, struct file *, int\);)S
36 243.6 M(        int \(*lock\) \(struct file *, int, struct file_lock *\);)S
36 232.8 M(        ssize_t \(*readv\) \(struct file *, const struct iovec *, unsigned long, loff_t *\);)S
36 222 M(        ssize_t \(*writev\) \(struct file *, const struct iovec *, unsigned long, loff_t *\);)S
36 211.2 M(};)S
36 202.6 M 415.0 2.0 F
11/F4 SF 25 143.2 M(1. )S
11/F5 SF (owner)S
11/F4 SF ( - a pointer to the module that owns the subsystem in question. Only drivers need to set it to)S
36 130 M(THIS_MODULE, filesystems can happily ignore it because their module counts are controlled at)S
36 116.8 M(mount/umount time whilst the drivers need to control it at open/release time)S
25 103.6 M(2. )S
11/F5 SF (llseek)S
11/F4 SF ( - implements the lseek\(2\) system call. Usually it is omitted and)S
36 90.4 M(fs/read_write.c:default_llseek\(\) is used which does the right thing \(TODO: force all those who set it)S
36 77.2 M(to NULL currently to use default_llseek - that way we save an if\(\) in llseek\(\)\))S
25 64 M(3. )S
11/F5 SF (read)S
11/F4 SF ( - implements read\(2\) system call. Filesystems can use mm/filemap.c:generic_file_read\(\) for)S
36 50.8 M(regular files and fs/read_write.c:generic_read_dir\(\) \(which simply returns -EISDIR\) for directories)S
36 37.6 M(here)S
25 24.4 M(4. )S
11/F5 SF (write)S
11/F4 SF ( - implements write\(2\) system call. Filesystems can use mm/filemap.c:generic_file_write\(\) for)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.4 File Structure Management)S
474.8 0 M(44)S
GR
SP
%%EndPage
%%Page: 45 47
GS
72 36 T
11/F4 SF 36 684.8 M(regular files and ignore it for directories here)S
25 671.6 M(5. )S
11/F5 SF (readdir)S
11/F4 SF ( - used by filesystems. Ignored for regular files and implements readdir\(2\) and getdents\(2\))S
36 658.4 M(system calls for directories)S
25 645.2 M(6. )S
11/F5 SF (poll)S
11/F4 SF ( - implements poll\(2\) and select\(2\) system calls)S
25 632 M(7. )S
11/F5 SF (ioctl)S
11/F4 SF ( - implements driver or filesystem-specific ioctls. Note that generic file ioctls like FIBMAP,)S
36 618.8 M(FIGETBSZ, FIONREAD are implemented by higher levels so they never read f_op->ioctl\(\) method)S
25 605.6 M(8. )S
11/F5 SF (mmap)S
11/F4 SF ( - implements mmap system call. Filesystems can use generic_file_mmap here for regular)S
36 592.4 M(files and ignore it on directories)S
25 579.2 M(9. )S
11/F5 SF (open)S
11/F4 SF ( - called at open\(2\) time by dentry_open\(\). Filesystems rarely use this, e.g. coda tries to cache)S
36 566 M(the file locally at open time)S
19.5 552.8 M(10. )S
11/F5 SF (flush)S
11/F4 SF ( - called at each close\(2\) of this file, not necessarily the last one \(see release\(\) method below\).)S
36 539.6 M(The only filesystem that uses this is NFS client to flush all dirty pages. Note that this can return an)S
36 526.4 M(error which will be passed back to userspace which made the close\(2\) system call)S
19.5 513.2 M(11. )S
11/F5 SF (release)S
11/F4 SF ( - called at the last close\(2\) of this file, i.e. when file->f_count reaches 0. Although defined)S
36 500 M(as returning int, the return value is ignored by VFS \(see fs/file_table.c:__fput\(\)\))S
19.5 486.8 M(12. )S
11/F5 SF (fsync)S
11/F4 SF ( - maps directly to fsync\(2\)/fdatasync\(2\) system calls, with the last argument specifying)S
36 473.6 M(whether it is fsync or fdatasync. Almost no work is done by VFS around this, except to map file)S
36 460.4 M(descriptor to a file structure \(file = fget\(fd\)\) and down/up inode->i_sem semaphore. Ext2 filesystem)S
36 447.2 M(currently ignores the last argument and does exactly the same for fsync\(2\) and fdatasync\(2\))S
19.5 434 M(13. )S
11/F5 SF (fasync)S
11/F4 SF ( - this method is called when file->f_flags & FASYNC changes)S
19.5 420.8 M(14. )S
11/F5 SF (lock)S
11/F4 SF ( - the filesystem-specific portion of the POSIX fcntl\(\) file region locking mechanism. The only)S
36 407.6 M(bug here is that because it is called before fs-independent portion \(posix_lock_file\(\)\), if it succeeds)S
36 394.4 M(but the standard posix lock code fails then it will never be unlocked on fs-dependent level..)S
19.5 381.2 M(15. )S
11/F5 SF (readv)S
11/F4 SF ( - implements readv\(2\) system call)S
19.5 368 M(16. )S
11/F5 SF (writev)S
11/F4 SF ( - implements writev\(2\) system call)S
17/F9 SF 0 314 M(3.5 Superblock and Mountpoint Management)S
11/F4 SF 0 274.4 M(Under Linux, information about mounted filesystems is kept in two separate structures - super_block and)S
0 261.2 M(vfsmount. The reason for this is that Linux allows to mount the same filesystem \(block device\) under)S
0 248 M(multiple mount points, which means that the same super_block can correspond to multiple vfsmount)S
0 234.8 M(structures.)S
0 208.4 M(Let us look at struct super_block first, declared in include/linux/fs.h:)S
36 173.4 M 415.0 2.0 F
9/F0 SF 36 156 M(struct super_block {)S
36 145.2 M(        struct list_head        s_list;         /* Keep this first */)S
36 134.4 M(        kdev_t                  s_dev;)S
36 123.6 M(        unsigned long           s_blocksize;)S
36 112.8 M(        unsigned char           s_blocksize_bits;)S
36 102 M(        unsigned char           s_lock;)S
36 91.2 M(        unsigned char           s_dirt;)S
36 80.4 M(        struct file_system_type *s_type;)S
36 69.6 M(        struct super_operations *s_op;)S
36 58.8 M(        struct dquot_operations *dq_op;)S
36 48 M(        unsigned long           s_flags;)S
36 37.2 M(        unsigned long           s_magic;)S
36 26.4 M(        struct dentry           *s_root;)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.5 Superblock and Mountpoint Management)S
474.8 0 M(45)S
GR
SP
%%EndPage
%%Page: 46 48
GS
72 36 T
9/F0 SF 36 687.2 M(        wait_queue_head_t       s_wait;)S
36 676.4 M()S
36 665.6 M(        struct list_head        s_dirty;        /* dirty inodes */)S
36 654.8 M(        struct list_head        s_files;)S
36 644 M()S
36 633.2 M(        struct block_device     *s_bdev;)S
36 622.4 M(        struct list_head        s_mounts;       /* vfsmount\(s\) of this one */)S
36 611.6 M(        struct quota_mount_options s_dquot;     /* Diskquota specific options */)S
36 600.8 M()S
36 590 M(       union {)S
36 579.2 M(                struct minix_sb_info    minix_sb;)S
36 568.4 M(                struct ext2_sb_info     ext2_sb;)S
36 557.6 M(                ..... all filesystems that need sb-private info ...)S
36 546.8 M(                void                    *generic_sbp;)S
36 536 M(        } u;)S
36 525.2 M(       /*)S
36 514.4 M(         * The next field is for VFS *only*. No filesystems have any business)S
36 503.6 M(         * even looking at it. You had been warned.)S
36 492.8 M(         */)S
36 482 M(        struct semaphore s_vfs_rename_sem;      /* Kludge */)S
36 471.2 M()S
36 460.4 M(        /* The next field is used by knfsd when converting a \(inode number based\))S
36 449.6 M(         * file handle into a dentry. As it builds a path in the dcache tree from)S
36 438.8 M(         * the bottom up, there may for a time be a subpath of dentrys which is not)S
36 428 M(         * connected to the main tree.  This semaphore ensure that there is only ever)S
36 417.2 M(         * one such free path per filesystem.  Note that unconnected files \(or other)S
36 406.4 M(         * non-directories\) are allowed, but not unconnected diretories.)S
36 395.6 M(         */)S
36 384.8 M(        struct semaphore s_nfsd_free_path_sem;)S
36 374 M(};)S
36 365.4 M 415.0 2.0 F
11/F4 SF 0 319.2 M(The various fields in the super_block structure are:)S
25 279.6 M(1. )S
11/F5 SF (s_list)S
11/F4 SF ( - a doubly-linked list of all active superblocks, note I don't say "of all mounted filesystems")S
36 266.4 M(because under Linux one can have multiple instances of a mounted filesystem corresponding to a)S
36 253.2 M(single superblock)S
25 240 M(2. )S
11/F5 SF (s_dev)S
11/F4 SF ( - for filesystems which require a block to be mounted on, i.e. for FS_REQUIRES_DEV)S
36 226.8 M(filesystems, this is the i_dev of the block device. For others \(called anonymous filesystems\) this is an)S
36 213.6 M(integer MKDEV\(UNNAMED_MAJOR, i\) where i is the first unset bit in unnamed_dev_in_use)S
36 200.4 M(array, between 1 and 255 inclusive. See fs/super.c:get_unnamed_dev\(\)/put_unnamed_dev\(\). It has)S
36 187.2 M(been suggested many times that anonymous filesystems should not use s_dev field)S
25 174 M(3. )S
11/F5 SF (s_blocksize, s_blocksize_bits)S
11/F4 SF ( - blocksize and log2\(blocksize\))S
25 160.8 M(4. )S
11/F5 SF (s_lock)S
11/F4 SF ( - indicates whether superblock is currently locked by lock_super\(\)/unlock_super\(\))S
25 147.6 M(5. )S
11/F5 SF (s_dirt)S
11/F4 SF ( - set when superblock is changed and cleared whenever it is written back to disk)S
25 134.4 M(6. )S
11/F5 SF (s_type)S
11/F4 SF ( - pointer to 'struct file_system_type' of the corresponding filesystem. Filesystem's)S
36 121.2 M(read_super\(\) method doesn't need to set it as VFS fs/super.c:read_super\(\) sets it for you if fs-specific)S
36 108 M(read_super\(\) succeeds and resets to NULL if it fails)S
25 94.8 M(7. )S
11/F5 SF (s_op)S
11/F4 SF ( - pointer to super_operations structure which contains fs-specific methods to read/write inodes)S
36 81.6 M(etc. It is the job of filesystem's read_super\(\) method to initialise s_op correctly)S
25 68.4 M(8. )S
11/F5 SF (dq_op)S
11/F4 SF ( - disk quota operations)S
25 55.2 M(9. )S
11/F5 SF (s_flags)S
11/F4 SF ( - superblock flags)S
19.5 42 M(10. )S
11/F5 SF (s_magic)S
11/F4 SF ( - filesystem's magic number. Used by minix filesystem to differentiate between multiple)S
36 28.8 M(flavours of itself)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.5 Superblock and Mountpoint Management)S
474.8 0 M(46)S
GR
SP
%%EndPage
%%Page: 47 49
GS
72 36 T
11/F4 SF 19.5 684.8 M(11. )S
11/F5 SF (s_root)S
11/F4 SF ( - dentry of the filesystem's root. It is the job of read_super\(\) to read the root inode from the)S
36 671.6 M(disk and pass it to d_alloc_root\(\) to allocate the dentry and instantiate it. Some filesystems spell)S
36 658.4 M("root" other than "/" and so use more generic d_alloc\(\) function to bind the dentry to a name, e.g.)S
36 645.2 M(pipefs mounts itself on "pipe:" as its own root instead of "/")S
19.5 632 M(12. )S
11/F5 SF (s_wait)S
11/F4 SF ( - waitqueue of processes waiting for superblock to be unlocked)S
19.5 618.8 M(13. )S
11/F5 SF (s_dirty)S
11/F4 SF ( - a list of all dirty inodes. Recall that if inode is dirty \(inode->i_state & I_DIRTY\) then it is)S
36 605.6 M(on superblock-specific dirty list linked via inode->i_list)S
19.5 592.4 M(14. )S
11/F5 SF (s_files)S
11/F4 SF ( - a list of all open files on this superblock. Useful for deciding whether filesystem can be)S
36 579.2 M(remounted read-only, see fs/file_table.c:fs_may_remount_ro\(\) which goes through sb->s_files list)S
36 566 M(and denies remounting if there are files opened for write \(file->f_mode & FMODE_WRITE\) or files)S
36 552.8 M(with pending unlink \(inode->i_nlink == 0\))S
19.5 539.6 M(15. )S
11/F5 SF (s_bdev)S
11/F4 SF ( - for FS_REQUIRES_DEV this points to the block_device structure describing the device)S
36 526.4 M(the filesystem is mounted on)S
19.5 513.2 M(16. )S
11/F5 SF (s_mounts)S
11/F4 SF ( - a list of all vfsmount structures, one for each mounted instance of this superblock)S
19.5 500 M(17. )S
11/F5 SF (s_dquot)S
11/F4 SF ( - more diskquota stuff)S
0 473.6 M(The superblock operations are described in the super_operations structure declared in include/linux/fs.h:)S
36 438.6 M 415.0 2.0 F
9/F0 SF 36 421.2 M(struct super_operations {)S
36 410.4 M(        void \(*read_inode\) \(struct inode *\);)S
36 399.6 M(        void \(*write_inode\) \(struct inode *, int\);)S
36 388.8 M(        void \(*put_inode\) \(struct inode *\);)S
36 378 M(        void \(*delete_inode\) \(struct inode *\);)S
36 367.2 M(        void \(*put_super\) \(struct super_block *\);)S
36 356.4 M(        void \(*write_super\) \(struct super_block *\);)S
36 345.6 M(        int \(*statfs\) \(struct super_block *, struct statfs *\);)S
36 334.8 M(        int \(*remount_fs\) \(struct super_block *, int *, char *\);)S
36 324 M(        void \(*clear_inode\) \(struct inode *\);)S
36 313.2 M(        void \(*umount_begin\) \(struct super_block *\);)S
36 302.4 M(};)S
36 293.8 M 415.0 2.0 F
11/F4 SF 25 234.4 M(1. )S
11/F5 SF (read_inode)S
11/F4 SF ( - reads the inode from the filesystem. It is only called from fs/inode.c:get_new_inode\(\))S
36 221.2 M(from iget4\(\) \(and therefore iget\(\)\). If filesystem wants to use iget\(\) then read_inode\(\) must be)S
36 208 M(implemented - otherwise get_new_inode\(\) will panic. While inode is being read it is locked)S
36 194.8 M(\(inode->i_state = I_LOCK\). When the function returns all waiters on inode->i_wait are woken up.)S
36 181.6 M(The job of filesystem's read_inode\(\) method is to locate the disk block which contains the inode to be)S
36 168.4 M(read and use buffer cache bread\(\) function to read it in and initialise the various fields of inode)S
36 155.2 M(structure, for example the inode->i_op and inode->i_fop so that VFS level knows what operations)S
36 142 M(can be performed on the inode or corresponding file. Filesystems that don't implement read_inode\(\))S
36 128.8 M(are ramfs and pipefs. For example, ramfs has its own inode-generating function ramfs_get_inode\(\))S
36 115.6 M(with all the inode operations calling it as needed)S
25 102.4 M(2. )S
11/F5 SF (write_inode)S
11/F4 SF ( - write inode back to disk. Similar to read_inode\(\) in that it needs to locate the relevant)S
36 89.2 M(block on disk and interact with buffer cache by calling mark_buffer_dirty\(bh, 0\), 0 meaning that the)S
36 76 M(block must be flushed at "normal priority" instead of "superblock priority" which means less)S
36 62.8 M(frequently. This method is called on dirty inodes \(those marked dirty with mark_inode_dirty\) when)S
36 49.6 M(the inode needs to be sync'd either individually or as part of syncing the entire filesystem)S
25 36.4 M(3. )S
11/F5 SF (put_inode)S
11/F4 SF ( - called whenever the reference count is decreased)S
25 23.2 M(4. )S
11/F5 SF (delete_inode)S
11/F4 SF ( - called whenever both inode->i_count and inode->i_nlink reach 0. Filesystem deletes)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.5 Superblock and Mountpoint Management)S
474.8 0 M(47)S
GR
SP
%%EndPage
%%Page: 48 50
GS
72 36 T
11/F4 SF 36 684.8 M(the on-disk copy of the inode and calls clear_inode\(\) on VFS inode to "terminate it with extreme)S
36 671.6 M(prejudice")S
25 658.4 M(5. )S
11/F5 SF (put_super)S
11/F4 SF ( - called at the last stages of umount\(2\) system call to notify the filesystem that any)S
36 645.2 M(private information held by the filesystem about this instance should be freed. Typically this would)S
36 632 M(brelse\(\) the block containing the superblock and kfree\(\) any bitmaps allocated for free blocks, inodes)S
36 618.8 M(etc)S
25 605.6 M(6. )S
11/F5 SF (write_super)S
11/F4 SF ( - called when superblock needs to be written back to disk. It should find the block)S
36 592.4 M(containing the superblock \(usually kept in sb-private area\) and mark_buffer_dirty\(bh, 1\), 1)S
36 579.2 M(signifying that it is an "important" block that should be flushed at higher frequency than the others. It)S
36 566 M(should also clear sb->s_dirt flag)S
25 552.8 M(7. )S
11/F5 SF (statfs)S
11/F4 SF ( - implements fstatfs\(2\)/statfs\(2\) system calls. Note that the pointer to 'struct statfs' passed as)S
36 539.6 M(argument is a kernel pointer, not a user pointer so we don't need to do any io to userspace. If not)S
36 526.4 M(implemented then statfs\(2\) will fail with ENOSYS)S
25 513.2 M(8. )S
11/F5 SF (remount_fs)S
11/F4 SF ( - called whenever filesystem is being remounted)S
25 500 M(9. )S
11/F5 SF (clear_inode)S
11/F4 SF ( - called from VFS level clear_inode\(\). Filesystems that attach private data to inode)S
36 486.8 M(structure \(via generic_ip field\) must free it here)S
19.5 473.6 M(10. )S
11/F5 SF (umount_begin)S
11/F4 SF ( - called during forced umount to notify the filesystem beforehand, so that it can do)S
36 460.4 M(its best to make sure that nothing keeps the filesystem busy. Currently used only by NFS. This has)S
36 447.2 M(nothing to do with the idea of generic VFS level forced umount support)S
0 420.8 M(So, let us look at what happens when we mount a on-disk \(FS_REQUIRES_DEV\) filesystem. The)S
0 407.6 M(implementation of the mount\(2\) system call is in fs/super.c:sys_mount\(\) which is the just a wrapper that)S
0 394.4 M(copies the options, filesystem type and device name for the do_mount\(\) function which does the real work:)S
25 354.8 M(1. )S
(Filesystem driver is loaded if needed and its module's reference count is incremented. Note that)S
36 341.6 M(during mount operation the filesystem module's reference count is incremented twice - once by)S
36 328.4 M(do_mount\(\) calling get_fs_type\(\) and once by get_sb_dev\(\) calling get_filesystem\(\) if read_super\(\))S
36 315.2 M(was successful. The first increment is to prevent module unloading while we are inside read_super\(\))S
36 302 M(method and the second increment is to indicate that the module is in use by this mounted instance.)S
36 288.8 M(Obviously do_mount\(\) decrements the count before returning so overall the count only grows by 1)S
36 275.6 M(after each mount)S
25 262.4 M(2. )S
(Since in our case fs_type->fs_flags & FS_REQUIRES_DEV is true, the superblock is initialised by)S
36 249.2 M(a call to get_sb_bdev\(\) which obtains the reference to the block device and interacts with the)S
36 236 M(filesystem's read_super\(\) method to fill in the superblock. If all goes well, the super_block structure)S
36 222.8 M(is initialised and we have an extra reference to the filesystem's module and a reference to the)S
36 209.6 M(underlying block device)S
25 196.4 M(3. )S
(A new vfsmount structure is allocated and linked to sb->s_mounts list and to the global vfsmntlist)S
36 183.2 M(list. The vfsmount field mnt_instances allows to find all instances mounted on the same superblock)S
36 170 M(as this one. The vfsmount field mnt_list allows to find all instances for all superblocks system-wide.)S
36 156.8 M(The vfsmount structure's mnt_sb field points to this superblock and mnt_root has a new reference to)S
36 143.6 M(the sb->s_root dentry)S
17/F9 SF 0 89.6 M(3.6 Example Virtual Filesystem: pipefs)S
11/F4 SF 0 50 M(As a simple example of Linux filesystem that does not require a block device for mounting let us consider)S
0 36.8 M(pipefs from fs/pipe.c. The filesystem's preamble is rather straightforward and requires little explanation:)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.6 Example Virtual Filesystem: pipefs)S
474.8 0 M(48)S
GR
SP
%%EndPage
%%Page: 49 51
GS
72 36 T
36 689.4 M 415.0 2.0 F
9/F0 SF 36 672 M(static DECLARE_FSTYPE\(pipe_fs_type, "pipefs", pipefs_read_super,)S
36 661.2 M(        FS_NOMOUNT|FS_SINGLE\);)S
36 650.4 M()S
36 639.6 M(static int __init init_pipe_fs\(void\))S
36 628.8 M({)S
36 618 M(        int err = register_filesystem\(&pipe_fs_type\);)S
36 607.2 M(        if \(!err\) {)S
36 596.4 M(                pipe_mnt = kern_mount\(&pipe_fs_type\);)S
36 585.6 M(                err = PTR_ERR\(pipe_mnt\);)S
36 574.8 M(                if \(!IS_ERR\(pipe_mnt\)\))S
36 564 M(                        err = 0;)S
36 553.2 M(        })S
36 542.4 M(        return err;)S
36 531.6 M(})S
36 520.8 M()S
36 510 M(static void __exit exit_pipe_fs\(void\))S
36 499.2 M({)S
36 488.4 M(        unregister_filesystem\(&pipe_fs_type\);)S
36 477.6 M(        kern_umount\(pipe_mnt\);)S
36 466.8 M(})S
36 456 M()S
36 445.2 M(module_init\(init_pipe_fs\))S
36 434.4 M(module_exit\(exit_pipe_fs\))S
36 425.8 M 415.0 2.0 F
11/F4 SF 0 379.6 M(The filesystem is of type FS_NOMOUNT|FS_SINGLE which means it cannot be mounted from userspace)S
0 366.4 M(and can only have one superblock system-wide. The FS_SINGLE file also means that it must be mounted via)S
0 353.2 M(kern_mount\(\) after it is successfully registered via register_filesystem\(\) which is exactly what happens in)S
0 340 M(init_pipe_fs\(\). The only bug in this function is that if kern_mount\(\) fails \(e.g. because kmalloc\(\) failed in)S
0 326.8 M(add_vfsmnt\) then the filesystem is left as registered but module initialisation fails. This will cause "cat)S
0 313.6 M(/proc/filesystems" to Oops. \(have just sent a patch to Linus mentioning that although this is not a real bug)S
0 300.4 M(today as pipefs can't be compiled as a module it should be written with the view that in the future it may)S
0 287.2 M(become modularized\).)S
0 260.8 M(The result of register_filesystem\(\) is that pipe_fs_type is linked into the file_systems list so one can read)S
0 247.6 M(/proc/filesystems and find "pipefs" entry in there with "nodev" flag indicating that FS_REQUIRES_DEV was)S
0 234.4 M(not set. The /proc/filesystems file should really be enhanced to support all the new FS_ flags \(and I made a)S
0 221.2 M(patch to do so\) but it cannot be done because it will break all the user applications that use it. Despite Linux)S
0 208 M(kernel interfaces changing every minute \(only for the better\) when it comes to the userspace compatibility,)S
0 194.8 M(Linux is a very conservative operating system which allows many applications to be used for a long time)S
0 181.6 M(without being recompiled.)S
0 155.2 M(The result of kern_mount\(\) is that:)S
25 115.6 M(1. )S
(A new unnamed \(anonymous\) device number is allocated by setting a bit unnamed_dev_in_use)S
36 102.4 M(bitmap, If there are no more bits then kern_mount\(\) fails with EMFILE)S
25 89.2 M(2. )S
(A new superblock structure is allocated by means of get_empty_super\(\). The get_empty_super\(\))S
36 76 M(function walks the list of superblocks headed by super_block and looks for empty entry, i.e.)S
36 62.8 M(s->s_dev == 0. If no such empty superblock is found then a new one is allocated using kmalloc\(\) at)S
36 49.6 M(GFP_USER priority. The maximum system-wide number of superblocks is checked in)S
36 36.4 M(get_empty_super\(\) so if it starts failing, one can adjust the tunable /proc/sys/fs/super-max)S
25 23.2 M(3. )S
(A filesystem-specific pipe_fs_type->read_super\(\) method, i.e. pipefs_read_super\(\) is invoked which)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.6 Example Virtual Filesystem: pipefs)S
474.8 0 M(49)S
GR
SP
%%EndPage
%%Page: 50 52
GS
72 36 T
11/F4 SF 36 684.8 M(allocates root inode and root dentry sb->s_root and set sb->s_op to be &pipefs_ops)S
25 671.6 M(4. )S
(Then kern_mount\(\) calls add_vfsmnt\(NULL, sb->s_root, "none"\) which allocates a new vfsmount)S
36 658.4 M(structure and links it into vfsmntlist and sb->s_mounts)S
25 645.2 M(5. )S
(The pipe_fs_type->kern_mnt is set to this new vfsmount structure and it is returned. The reason why)S
36 632 M(the return value of kern_mount\(\) is a vfsmount structure is because even FS_SINGLE filesystems)S
36 618.8 M(can be mounted multiple times and so their mnt->mnt_sb will point to the same thing which would)S
36 605.6 M(be silly to return from multiple calls to kern_mount\(\))S
0 579.2 M(Now that the filesystem is registered and inkernel-mounted we can use it. The entry point into the pipefs)S
0 566 M(filesystem is the pipe\(2\) system call implemented in arch-dependent function sys_pipe\(\) but the real work is)S
0 552.8 M(done by a portable fs/pipe.c:do_pipe\(\) function. Let us look at do_pipe\(\) then. The interaction with pipefs)S
0 539.6 M(happens when do_pipe\(\) calls get_pipe_inode\(\) to allocate a new pipefs inode. For this inode inode->i_sb is)S
0 526.4 M(set to pipefs' superblock pipe_mnt->mnt_sb, the file operations i_fop is set to rdwr_pipe_fops and the)S
0 513.2 M(number of readers and writers \(held in inode->i_pipe\) is set to 1. The reason why there is a separate inode)S
0 500 M(field i_pipe instead of keeping it in the fs-private union is that pipes and FIFOs share the same code and)S
0 486.8 M(FIFOs can exist on other filesystems which use the other access paths within the same union which is very)S
0 473.6 M(bad C and can work only by pure luck. So, yes, 2.2.x kernels work only by pure luck and will stop working as)S
0 460.4 M(soon as you slightly rearrange the fields in the inode.)S
0 434 M(Each pipe\(2\) system call increments a reference count on the pipe_mnt mount instance.)S
0 407.6 M(Under Linux, the pipes are not symmetric \(bidirection or STREAM pipes\), i.e. two sides of the file have)S
0 394.4 M(different file->f_op operations - the read_pipe_fops and write_pipe_fops respectively. The write on read)S
0 381.2 M(side returns EBADF and so does read on write side.)S
17/F9 SF 0 314 M(3.7 Example Disk Filesystem: BFS)S
11/F4 SF 0 274.4 M(As a simple example of ondisk Linux filesystem let us consider BFS. The preamble of the BFS module is in)S
0 261.2 M(fs/bfs/inode.c:)S
36 226.2 M 415.0 2.0 F
9/F0 SF 36 208.8 M(static DECLARE_FSTYPE_DEV\(bfs_fs_type, "bfs", bfs_read_super\);)S
36 198 M()S
36 187.2 M(static int __init init_bfs_fs\(void\))S
36 176.4 M({)S
36 165.6 M(        return register_filesystem\(&bfs_fs_type\);)S
36 154.8 M(})S
36 144 M()S
36 133.2 M(static void __exit exit_bfs_fs\(void\))S
36 122.4 M({)S
36 111.6 M(        unregister_filesystem\(&bfs_fs_type\);)S
36 100.8 M(})S
36 90 M()S
36 79.2 M(module_init\(init_bfs_fs\))S
36 68.4 M(module_exit\(exit_bfs_fs\))S
36 59.8 M 415.0 2.0 F
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.7 Example Disk Filesystem: BFS)S
474.8 0 M(50)S
GR
SP
%%EndPage
%%Page: 51 53
GS
72 36 T
11/F4 SF 0 684.8 M(A special fstype declaration macro DECLARE_FSTYPE_DEV\(\) is used which sets the fs_type->flags to)S
0 671.6 M(FS_REQUIRES_DEV to signify that BFS requires a real block device to be mounted on.)S
0 645.2 M(The module's initialisation function registers the filesystem with VFS and the cleanup function \(only present)S
0 632 M(when BFS is configured to be a module\) unregisters it.)S
0 605.6 M(With the filesystem registered, we can proceed to mount it, which would invoke out fs_type->read_super\(\))S
0 592.4 M(method which is implemented in fs/bfs/inode.c:bfs_read_super\(\). It does the following:)S
25 552.8 M(1. )S
(set_blocksize\(s->s_dev, BFS_BSIZE\) - since we are about to interact with block device layer via)S
36 539.6 M(buffer cache we must initialise a few things, namely set the block size and also inform VFS via fields)S
36 526.4 M(s->s_blocksize and s->s_blocksize_bits)S
25 513.2 M(2. )S
(bh = bread\(dev, 0, BFS_BSIZE\) - we read the block 0 of the device passed via s->s_dev. This block)S
36 500 M(is the filesystem's superblock)S
25 486.8 M(3. )S
(Superblock is validated against BFS_MAGIC number and if valid, stored in the sb-private field)S
36 473.6 M(s->su_sbh \(which is really s->u.bfs_sb.si_sbh\))S
25 460.4 M(4. )S
(Then we allocate inode bitmap using kmalloc\(GFP_KERNEL\) and clear all bits to 0 except the first)S
36 447.2 M(two which we set to 1 to indicate that we should never allocate inodes 0 and 1. Inode 2 is root and the)S
36 434 M(corresponding bit will be set to 1 a few lines later anyway - the filesystem should have a valid root)S
36 420.8 M(inode at mounting time!)S
25 407.6 M(5. )S
(Then we initialise s->s_op which means that we can from this point invoke inode cache via iget\(\))S
36 394.4 M(which results in s_op->read_inode\(\) to be invoked. This finds the block that contains the specified)S
36 381.2 M(\(by inode->i_ino and inode->i_dev\) inode and reads it in. If we fails to get root inode then we free)S
36 368 M(the inode bitmap and release superblock buffer back to buffer cache and return NULL. If root inode)S
36 354.8 M(was read OK, then we allocate a dentry with name "/" \(as becometh root\) and instantiate it with this)S
36 341.6 M(inode)S
25 328.4 M(6. )S
(Now we go through all inodes on the filesystem and read them all in order to set the corresponding)S
36 315.2 M(bits in our internal inode bitmap and also to calculate some other internal parameters like the offset of)S
36 302 M(last inode and the start/end blocks of last file. Each inode we read is returned back to inode cache via)S
36 288.8 M(iput\(\) - we don't hold a reference to it longer than needed)S
25 275.6 M(7. )S
(If the filesystem was not mounted read-only we mark the superblock buffer dirty and set s->s_dirt)S
36 262.4 M(flag \(TODO: why do I do this? Originally, I did it because minix_read_super\(\) did but neither minix)S
36 249.2 M(nor BFS seem to modify superblock in the read_super\(\)\))S
25 236 M(8. )S
(All is well so we return this initialised superblock back to the caller at VFS level, i.e.)S
36 222.8 M(fs/super.c:read_super\(\))S
0 196.4 M(After the read_super\(\) function returns successfully, VFS obtains the reference to the filesystem module via)S
0 183.2 M(call to get_filesystem\(fs_type\) in fs/super.c:get_sb_bdev\(\) and a reference to the block device.)S
0 156.8 M(Now, let us examine what happens when we do io on the filesystem. We already examined how inodes are)S
0 143.6 M(read when iget\(\) is called and how they are released on iput\(\). Reading inodes sets up among other things,)S
0 130.4 M(inode->i_op and inode->i_fop and opening a file propagates inode->i_fop into file->f_op.)S
0 104 M(Let us examine the code path of the link\(2\) system call. The implementation of the system call is in)S
0 90.8 M(fs/namei.c:sys_link\(\):)S
25 51.2 M(1. )S
(The userspace names are copied into kernel space by means of getname\(\) function which does the)S
36 38 M(error checking)S
25 24.8 M(2. )S
(This names are nameidata converted using path_init\(\)/path_walk\(\) interaction with dcache. The result)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.7 Example Disk Filesystem: BFS)S
474.8 0 M(51)S
GR
SP
%%EndPage
%%Page: 52 54
GS
72 36 T
11/F4 SF 36 684.8 M(is stored in old_nd and nd structures)S
25 671.6 M(3. )S
(If old_nd.mnt != nd.mnt then "cross-device link" EXDEV is returned - one cannot link between)S
36 658.4 M(filesystems, in Linux this translates into - one cannot link between mounted instances of a filesystem)S
36 645.2 M(\(or, in particular between filesystems\))S
25 632 M(4. )S
(A new dentry is created corresponding to nd by lookup_create\(\))S
25 618.8 M(5. )S
(A generic vfs_link\(\) function is called which checks if we can create a new entry in the directory and)S
36 605.6 M(invokes the dir->i_op->link\(\) method which brings us back to filesystem-specific)S
36 592.4 M(fs/bfs/dir.c:bfs_link\(\) function)S
25 579.2 M(6. )S
(Inside bfs_link\(\) we check if we are trying to link a directory and refuse with EPERM error. This is)S
36 566 M(the same behaviour as standard \(ext2\))S
25 552.8 M(7. )S
(We attempt to add a new directory entry to the specified directory by calling the helper function)S
36 539.6 M(bfs_add_entry\(\) which goes through all entries looking for unused slot \(de->ino == 0\) and when)S
36 526.4 M(found writes out the name/inode pair into the corresponding block and marks it dirty \(at)S
36 513.2 M(non-superblock priority\))S
25 500 M(8. )S
(If we successfully added the directory entry then there is no way to fail the operation so we increment)S
36 486.8 M(inode->i_nlink and update inode->i_ctime and mark this inode dirty as well as instantiating the new)S
36 473.6 M(dentry with the inode)S
0 447.2 M(Other related inode operations like unlink\(\)/rename\(\) etc work in a similar way so not much is gained by)S
0 434 M(examining them all in details.)S
17/F9 SF 0 380 M(3.8 Execution Domains and Binary Formats)S
11/F4 SF 0 340.4 M(Linux supports loading user application binaries from disk. More interestingly, the binaries can be stored in)S
0 327.2 M(different formats and the operating system's response to programs via system calls can deviate from norm)S
0 314 M(\(norm being the Linux behaviour\) as required, in order to emulate formats found in other flavours of UNIX)S
0 300.8 M(\(coff etc.\) and also to emulate system calls behaviour of other flavours \(Solaris, UnixWare etc.\). This is what)S
0 287.6 M(execution domains and binary formats are for.)S
0 261.2 M(Each Linux task has a personality stored in its task_struct p->personality. The currently existing \(either in the)S
0 248 M(official kernel or as addon patch\) personalities include support for FreeBSD, Solaris, UnixWare, OpenServer)S
0 234.8 M(and many other popular operating systems. The value of current->personality is split into two parts:)S
25 195.2 M(1. )S
(high byte - bug emulation:STICKY_TIMEOUTS,WHOLE_SECONDS etc)S
25 182 M(2. )S
(low byte - personality proper, a unique number)S
0 155.6 M(By changing personality we can change the way the operating system treats certain system calls, for example)S
0 142.4 M(adding a STICKY_TIMEOUT to current->personality makes select\(2\) system call to preserve the value of)S
0 129.2 M(last argument \(timeout\) instead of storing the unslept time. Some buggy programs rely on buggy operating)S
0 116 M(systems \(non-Linux\) and so Linux provides a way to emulate bugs in cases where the source code is not)S
0 102.8 M(available and so bugs cannot be fixed.)S
0 76.4 M(Execution domain is a contiguous range of personalities implemented by a single module. Usually a single)S
0 63.2 M(execution domain implements a single personality but sometimes it is possible to implement "close")S
0 50 M(personalities in a single module without too many conditionals.)S
0 23.6 M(Execution domains are implemented in kernel/exec_domain.c and were completely rewritten for 2.4 kernel,)S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.8 Execution Domains and Binary Formats)S
474.8 0 M(52)S
GR
SP
%%EndPage
%%Page: 53 55
GS
72 36 T
11/F4 SF 0 684.8 M(compared with 2.2.x. The list of execution domains currently supported by the kernel, along with the range of)S
0 671.6 M(personalities they support, is available by reading the /proc/execdomains file. Execution domains, except the)S
0 658.4 M(PER_LINUX one, can be implemented as dynamically loadable modules.)S
0 632 M(The user interface is via personality\(2\) system call which sets the current process' personality or returns the)S
0 618.8 M(value of current->personality if the argument is set to impossible personality 0xffffffff. Obviously, the)S
0 605.6 M(behaviour of this system call itself does not depend on personality..)S
0 579.2 M(The kernel interface to execution domains registration consists of two functions:)S
11/Fc SF 28.2 539.6 M(\267 )S
11/F4 SF (int register_exec_domain\(struct exec_domain *\) - registers the execution domain by linking it into)S
36 526.4 M(single-linked list exec_domains under the write protection of the read-write spinlock)S
36 513.2 M(exec_domains_lock. Returns 0 on success, non-zero on failure)S
11/Fc SF 28.2 500 M(\267 )S
11/F4 SF (int unregister_exec_domain\(struct exec_domain *\) - unregisters the execution domain by unlinking)S
36 486.8 M(it from the exec_domains list, again using exec_domains_lock spinlock in write mode. Returns 0 on)S
36 473.6 M(success)S
11/Fc SF 28.2 460.4 M(\267 )S
11/F4 SF 0 447.2 M(The reason why exec_domains_lock is a read-write is that only registration and unregistration requests)S
0 434 M(modify the list, whilst doing "cat /proc/filesystems" calls fs/exec_domain.c:get_exec_domain_list\(\) which)S
0 420.8 M(needs only read access to the list. Registering a new execution domain defines a "lcall7 handler" and a signal)S
0 407.6 M(number conversion map. Actually, ABI patch extends this concept of exec domain to include extra)S
0 394.4 M(information \(like socket options, socket types, address family and errno maps\).)S
0 368 M(The binary formats are implemented in a similar manner, i.e. a single-linked list formats is defined in)S
0 354.8 M(fs/exec.c and is protected by a read-write lock binfmt_lock. As with exec_domains_lock, the binfmt_lock is)S
0 341.6 M(taken read on most occasions except for registration/unregistration of binary formats. Registering a new)S
0 328.4 M(binary format enhances the execve\(2\) system call with new load_binary\(\)/load_shlib\(\) functions as well as)S
0 315.2 M(ability to core_dump\(\). The load_shlib\(\) method is used only by the old uselib\(2\) system call while the)S
0 302 M(load_binary\(\) method is called by the search_binary_handler\(\) from do_execve\(\) which implements)S
0 288.8 M(execve\(2\) system call.)S
0 262.4 M(The personality of the process is determined at binary format loading by the corresponding format's)S
0 249.2 M(load_binary\(\) method using some heuristics. For example to determine UnixWare7 binaries one first marks)S
0 236 M(the binary using elfmark\(1\) utility which sets the ELF header's e_flags to the magic value 0x314B4455 which)S
0 222.8 M(is detected at ELF loading time and current->personality is set to PER_UW7. If this heuristic fails, then a)S
0 209.6 M(more generic one, such as treat ELF interpreter paths like "/usr/lib/ld.so.1" or "/usr/lib/libc.so.1" to indicate a)S
0 196.4 M(SVR4 binary, is used and personality is set to PER_SVR4. One could write a little utility program that uses)S
0 183.2 M(Linux's ptrace\(2\) capabilities to single-step the code and force a running program into any personality.)S
0 156.8 M(Once personality \(and therefore current->exec_domain\) is known, the system calls are handled as follows.)S
0 143.6 M(Let us assume that a process makes a system call by means of lcall7 gate instruction. This transfers control to)S
0 130.4 M(ENTRY\(lcall7\) of arch/i386/kernel/entry.S because it was prepared in arch/i386/kernel/traps.c:trap_init\(\).)S
0 117.2 M(After appropriate stack layout conversion entry.S:lcall7 obtains the pointer to exec_domain from current and)S
0 104 M(then an offset of lcall7 handler within the exec_domain \(which is hardcoded as 4 in asm code so you can't)S
0 90.8 M(shift the 'handler' field around in C declaration of struct exec_domain\) and jumps to it. So, in C, it would look)S
0 77.6 M(like this:)S
36 42.6 M 415.0 2.0 F
9/F0 SF 36 25.2 M(static void UW7_lcall7\(int segment, struct pt_regs * regs\))S
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.8 Execution Domains and Binary Formats)S
474.8 0 M(53)S
GR
SP
%%EndPage
%%Page: 54 56
GS
72 36 T
9/F0 SF 36 687.2 M({)S
36 676.4 M(       abi_dispatch\(regs, &uw7_funcs[regs->eax & 0xff], 1\);)S
36 665.6 M(})S
36 657 M 415.0 2.0 F
11/F4 SF 0 610.8 M(where abi_dispatch\(\) is a wrapper around the table of function pointers that implement this personality's)S
0 597.6 M(system calls uw7_funcs.)S
0 575.8 M 487.0 2.0 F
11/F8 SF 187.3 720 M( Linux Kernel Internals )S
0 0 M(3.8 Execution Domains and Binary Formats)S
474.8 0 M(54)S
GR
SP
%%EndPage
%%EOF
